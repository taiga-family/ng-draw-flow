{"version":3,"file":"projects_demo_src_pages_documentation_terms-and-definitions_terms-and-definitions_component_ts.js","mappings":"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","sources":["./projects/demo/src/pages/documentation/terms-and-definitions/examplaes/connections-example/connections-example.component.ts","./projects/demo/src/pages/documentation/terms-and-definitions/examplaes/connections-example/connections-example.component.html","./projects/demo/src/pages/documentation/terms-and-definitions/examplaes/connectors-example/connectors-example.component.ts","./projects/demo/src/pages/documentation/terms-and-definitions/examplaes/connectors-example/connectors-example.component.html","./projects/demo/src/pages/documentation/terms-and-definitions/examplaes/nodes-example/nodes-example.component.ts","./projects/demo/src/pages/documentation/terms-and-definitions/examplaes/nodes-example/nodes-example.component.html","./projects/demo/src/pages/documentation/terms-and-definitions/examplaes/nodes/connectors/connectors.component.ts","./projects/demo/src/pages/documentation/terms-and-definitions/examplaes/nodes/connectors/connectors.component.html","./projects/demo/src/pages/documentation/terms-and-definitions/examplaes/nodes/node/node.component.ts","./projects/demo/src/pages/documentation/terms-and-definitions/examplaes/nodes/node/node.component.html","./projects/demo/src/pages/documentation/terms-and-definitions/terms-and-definitions.component.ts","./projects/demo/src/pages/documentation/terms-and-definitions/terms-and-definitions.component.html"],"sourcesContent":["import {ChangeDetectionStrategy, Component} from '@angular/core';\nimport {FormControl, ReactiveFormsModule} from '@angular/forms';\nimport type {DfDataModel} from '@ng-draw-flow/core';\nimport {\n    DfConnectionPoint,\n    NgDrawFlowComponent,\n    provideNgDrawFlowConfigs,\n} from '@ng-draw-flow/core';\n\nimport {SimpleNodeComponent} from '../../../../../app/modules/nodes';\n\n@Component({\n    standalone: true,\n    selector: 'app-connections-example',\n    imports: [NgDrawFlowComponent, ReactiveFormsModule],\n    templateUrl: './connections-example.component.html',\n    styleUrls: ['./connections-example.component.less'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    providers: [\n        provideNgDrawFlowConfigs({\n            nodes: {\n                simpleNode: SimpleNodeComponent,\n            },\n        }),\n    ],\n})\nexport default class ConnectionsExampleComponent {\n    protected data: DfDataModel = {\n        nodes: [\n            {\n                id: 'node-1',\n                data: {type: 'simpleNode'},\n                position: {x: -150, y: -50},\n                startNode: true,\n            },\n            {\n                id: 'node-2',\n                data: {type: 'simpleNode'},\n                position: {x: 150, y: 50},\n                endNode: true,\n            },\n        ],\n        connections: [\n            {\n                source: {\n                    nodeId: 'node-1',\n                    connectorType: DfConnectionPoint.Output,\n                    connectorId: 'node-1-output-1',\n                },\n                target: {\n                    nodeId: 'node-2',\n                    connectorType: DfConnectionPoint.Input,\n                    connectorId: 'node-2-input-1',\n                },\n            },\n        ],\n    };\n\n    public form = new FormControl(this.data);\n}\n","<ng-draw-flow [formControl]=\"form\" />\n","import {ChangeDetectionStrategy, Component} from '@angular/core';\nimport {FormControl, ReactiveFormsModule} from '@angular/forms';\nimport type {DfDataModel} from '@ng-draw-flow/core';\nimport {NgDrawFlowComponent, provideNgDrawFlowConfigs} from '@ng-draw-flow/core';\n\nimport {ConnectorsComponent} from '../nodes/connectors/connectors.component';\n\n@Component({\n    standalone: true,\n    selector: 'app-connectors-example',\n    imports: [NgDrawFlowComponent, ReactiveFormsModule],\n    templateUrl: './connectors-example.component.html',\n    styleUrls: ['./connectors-example.component.less'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    providers: [\n        provideNgDrawFlowConfigs({\n            nodes: {\n                connectors: ConnectorsComponent,\n            },\n        }),\n    ],\n})\nexport default class ConnectorsExampleComponent {\n    protected data: DfDataModel = {\n        nodes: [\n            {\n                id: 'node-1',\n                data: {type: 'connectors'},\n                position: {x: 0, y: 0},\n                startNode: true,\n            },\n        ],\n        connections: [],\n    };\n\n    public form = new FormControl(this.data);\n}\n","<ng-draw-flow [formControl]=\"form\" />\n","import {ChangeDetectionStrategy, Component} from '@angular/core';\nimport {FormControl, ReactiveFormsModule} from '@angular/forms';\nimport type {DfDataModel} from '@ng-draw-flow/core';\nimport {NgDrawFlowComponent, provideNgDrawFlowConfigs} from '@ng-draw-flow/core';\n\nimport {NodeComponent} from '../nodes/node/node.component';\n\n@Component({\n    standalone: true,\n    selector: 'app-nodes-example',\n    imports: [NgDrawFlowComponent, ReactiveFormsModule],\n    templateUrl: './nodes-example.component.html',\n    styleUrls: ['./nodes-example.component.less'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    providers: [\n        provideNgDrawFlowConfigs({\n            nodes: {\n                node: NodeComponent,\n            },\n        }),\n    ],\n})\nexport default class NodesExampleComponent {\n    protected data: DfDataModel = {\n        nodes: [\n            {\n                id: 'node-1',\n                data: {type: 'node', text: 'This is a node'},\n                position: {x: 0, y: 0},\n            },\n        ],\n        connections: [],\n    };\n\n    public form = new FormControl(this.data);\n}\n","<ng-draw-flow [formControl]=\"form\" />\n","import {ChangeDetectionStrategy, Component} from '@angular/core';\nimport {DfInputComponent, DfOutputComponent, DrawFlowBaseNode} from '@ng-draw-flow/core';\n\n@Component({\n    standalone: true,\n    selector: 'app-node',\n    imports: [DfInputComponent, DfOutputComponent],\n    templateUrl: './connectors.component.html',\n    styleUrls: ['./connectors.component.less'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ConnectorsComponent extends DrawFlowBaseNode {}\n","<df-input\n    class=\"input\"\n    [connectorData]=\"{nodeId, connectorId: nodeId + '-input-1', single: false}\"\n/>\n\n<p class=\"tui-text_body-xs text\">This node contains input and output connectors</p>\n\n<df-output\n    class=\"output\"\n    [connectorData]=\"{nodeId, connectorId: nodeId + '-output-1', single: false}\"\n/>\n","import {ChangeDetectionStrategy, Component} from '@angular/core';\nimport {DrawFlowBaseNode} from '@ng-draw-flow/core';\n\n@Component({\n    standalone: true,\n    selector: 'app-node',\n    templateUrl: './node.component.html',\n    styleUrls: ['./node.component.less'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NodeComponent extends DrawFlowBaseNode {}\n","<p class=\"tui-text_body-xs text\">{{ model.text }}</p>\n","import {ChangeDetectionStrategy, Component} from '@angular/core';\nimport {RouterLink} from '@angular/router';\nimport {TuiAddonDoc} from '@taiga-ui/addon-doc';\nimport {TuiLink} from '@taiga-ui/core';\n\nimport {\n    PanZoomConfigurationExample1Component,\n    PanZoomConfigurationExample2Component,\n    PanZoomConfigurationExample3Component,\n} from '../pan-zoom-configuration/examples';\nimport ConnectionsExampleComponent from './examplaes/connections-example/connections-example.component';\nimport ConnectorsExampleComponent from './examplaes/connectors-example/connectors-example.component';\nimport NodesExampleComponent from './examplaes/nodes-example/nodes-example.component';\n\n@Component({\n    standalone: true,\n    selector: 'terms-and-definitions',\n    imports: [\n        ConnectionsExampleComponent,\n        ConnectorsExampleComponent,\n        NodesExampleComponent,\n        PanZoomConfigurationExample1Component,\n        PanZoomConfigurationExample2Component,\n        PanZoomConfigurationExample3Component,\n        RouterLink,\n        TuiAddonDoc,\n        TuiLink,\n    ],\n    templateUrl: './terms-and-definitions.component.html',\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport default class TermsAndDefinitionsComponent {}\n","<tui-doc-page header=\"Terms and Definitions\">\n    <p>\n        In this part of the docs we are explaining some basic NgDrawFlow terms and definition. Three things you’ll be\n        using a lot in NgDrawFlow are nodes, connections, and connectors.\n    </p>\n    <section>\n        <h2>Nodes</h2>\n\n        <app-nodes-example />\n\n        <p>\n            Node in NgDrawFlow is an Angular component. This means it can display anything you desire. Each node has X\n            and Y coordinates that refer to the point at the center of the node, relative to the workspace. To create a\n            node, you need to extend from\n            <code>DrawFlowBaseNode</code>\n            .\n        </p>\n\n        <p>\n            To delete a node, select it and press\n            <code>Delete</code>\n            or\n            <code>Backspace</code>\n        </p>\n\n        <p>Some of the things you might do with a custom node are:</p>\n\n        <ul class=\"tui-list tui-list_small\">\n            <li class=\"tui-list__item\">Render form elements</li>\n            <li class=\"tui-list__item\">Visualize data</li>\n            <li class=\"tui-list__item\">Support multiple connectors</li>\n        </ul>\n    </section>\n    <section>\n        <h2>Connectors</h2>\n\n        <app-connectors-example />\n\n        <p>\n            A Connector is used to link nodes together. By default they are displayed as blue circles but the colour can\n            be changed using css variables. When creating a custom node, you may use as many connector handles as you\n            need. The main requirement is that each connector has a unique name starting with its nodeId (example:\n            <code>node-1-input-1</code>\n            ). More information can be found in\n            <a\n                routerLink=\"/documentation/connectors\"\n                tuiLink\n            >\n                the connector documentation\n            </a>\n            .\n        </p>\n        <p>Connectors are divided into two types: input connectors and output connectors.</p>\n        <p>\n            To connect two nodes, simply drag an output connector from one node to an input connector of another node.\n        </p>\n    </section>\n    <section>\n        <h2>Connections</h2>\n\n        <app-connections-example />\n\n        <p>\n            A Connection links two nodes together. It is represented by a Bezier curve. An edge is an SVG path, allowing\n            its line thickness and color to be adjusted through CSS variables.\n        </p>\n        <p>\n            More details can be found in\n            <a\n                routerLink=\"/documentation/connections\"\n                tuiLink\n            >\n                the connection lines documentation\n            </a>\n            .\n        </p>\n        <p>\n            To delete a connection, select it and press the\n            <code>Delete</code>\n            or\n            <code>Backspace key</code>\n            .\n        </p>\n    </section>\n</tui-doc-page>\n"],"names":["FormControl","ReactiveFormsModule","DfConnectionPoint","NgDrawFlowComponent","provideNgDrawFlowConfigs","SimpleNodeComponent","ConnectionsExampleComponent","constructor","data","nodes","id","type","position","x","y","startNode","endNode","connections","source","nodeId","connectorType","Output","connectorId","target","Input","form","selectors","standalone","features","i0","ɵɵProvidersFeature","simpleNode","ɵɵStandaloneFeature","decls","vars","consts","template","ConnectionsExampleComponent_Template","rf","ctx","ɵɵelement","ɵɵproperty","i1","NgControlStatus","FormControlDirective","styles","changeDetection","ConnectorsComponent","ConnectorsExampleComponent","connectors","ConnectorsExampleComponent_Template","NodeComponent","NodesExampleComponent","text","node","NodesExampleComponent_Template","DfInputComponent","DfOutputComponent","DrawFlowBaseNode","t","ɵɵInheritDefinitionFeature","ConnectorsComponent_Template","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵpureFunction2","_c0","ɵɵadvance","NodeComponent_Template","ɵɵtextInterpolate","model","RouterLink","TuiLink","TermsAndDefinitionsComponent","TermsAndDefinitionsComponent_Template","TuiDocPage","encapsulation"],"sourceRoot":"webpack:///","x_google_ignoreList":[]}