{"version":3,"file":"node_modules_ngx-highlightjs_fesm2022_ngx-highlightjs-line-numbers_mjs.js","mappings":"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","sources":["./node_modules/ngx-highlightjs/fesm2022/ngx-highlightjs-line-numbers.mjs"],"sourcesContent":["function activateLineNumbers() {\n    const w = window;\n    const d = document;\n    var TABLE_NAME = 'hljs-ln', LINE_NAME = 'hljs-ln-line', CODE_BLOCK_NAME = 'hljs-ln-code', NUMBERS_BLOCK_NAME = 'hljs-ln-numbers', NUMBER_LINE_NAME = 'hljs-ln-n', DATA_ATTR_NAME = 'data-line-number', BREAK_LINE_REGEXP = /\\r\\n|\\r|\\n/g;\n    if (w.hljs) {\n        w.hljs.initLineNumbersOnLoad = initLineNumbersOnLoad;\n        w.hljs.lineNumbersBlock = lineNumbersBlock;\n        w.hljs.lineNumbersValue = lineNumbersValue;\n        addStyles();\n    }\n    else {\n        w.console.error('highlight.js not detected!');\n    }\n    function isHljsLnCodeDescendant(domElt) {\n        var curElt = domElt;\n        while (curElt) {\n            if (curElt.className && curElt.className.indexOf('hljs-ln-code') !== -1) {\n                return true;\n            }\n            curElt = curElt.parentNode;\n        }\n        return false;\n    }\n    function getHljsLnTable(hljsLnDomElt) {\n        var curElt = hljsLnDomElt;\n        while (curElt.nodeName !== 'TABLE') {\n            curElt = curElt.parentNode;\n        }\n        return curElt;\n    }\n    // Function to workaround a copy issue with Microsoft Edge.\n    // Due to hljs-ln wrapping the lines of code inside a <table> element,\n    // itself wrapped inside a <pre> element, window.getSelection().toString()\n    // does not contain any line breaks. So we need to get them back using the\n    // rendered code in the DOM as reference.\n    function edgeGetSelectedCodeLines(selection) {\n        // current selected text without line breaks\n        var selectionText = selection.toString();\n        // get the <td> element wrapping the first line of selected code\n        var tdAnchor = selection.anchorNode;\n        while (tdAnchor.nodeName !== 'TD') {\n            tdAnchor = tdAnchor.parentNode;\n        }\n        // get the <td> element wrapping the last line of selected code\n        var tdFocus = selection.focusNode;\n        while (tdFocus.nodeName !== 'TD') {\n            tdFocus = tdFocus.parentNode;\n        }\n        // extract line numbers\n        var firstLineNumber = parseInt(tdAnchor.dataset.lineNumber);\n        var lastLineNumber = parseInt(tdFocus.dataset.lineNumber);\n        // multi-lines copied case\n        if (firstLineNumber != lastLineNumber) {\n            var firstLineText = tdAnchor.textContent;\n            var lastLineText = tdFocus.textContent;\n            // if the selection was made backward, swap values\n            if (firstLineNumber > lastLineNumber) {\n                var tmp = firstLineNumber;\n                firstLineNumber = lastLineNumber;\n                lastLineNumber = tmp;\n                tmp = firstLineText;\n                firstLineText = lastLineText;\n                lastLineText = tmp;\n            }\n            // discard not copied characters in first line\n            while (selectionText.indexOf(firstLineText) !== 0) {\n                firstLineText = firstLineText.slice(1);\n            }\n            // discard not copied characters in last line\n            while (selectionText.lastIndexOf(lastLineText) === -1) {\n                lastLineText = lastLineText.slice(0, -1);\n            }\n            // reconstruct and return the real copied text\n            var selectedText = firstLineText;\n            var hljsLnTable = getHljsLnTable(tdAnchor);\n            for (var i = firstLineNumber + 1; i < lastLineNumber; ++i) {\n                var codeLineSel = format('.{0}[{1}=\"{2}\"]', [CODE_BLOCK_NAME, DATA_ATTR_NAME, i]);\n                var codeLineElt = hljsLnTable.querySelector(codeLineSel);\n                selectedText += '\\n' + codeLineElt.textContent;\n            }\n            selectedText += '\\n' + lastLineText;\n            return selectedText;\n            // single copied line case\n        }\n        else {\n            return selectionText;\n        }\n    }\n    // ensure consistent code copy/paste behavior across all browsers\n    // (see https://github.com/wcoder/highlightjs-line-numbers.js/issues/51)\n    document.addEventListener('copy', function (e) {\n        // get current selection\n        var selection = window.getSelection();\n        // override behavior when one wants to copy line of codes\n        if (isHljsLnCodeDescendant(selection.anchorNode)) {\n            var selectionText;\n            // workaround an issue with Microsoft Edge as copied line breaks\n            // are removed otherwise from the selection string\n            if (window.navigator.userAgent.indexOf('Edge') !== -1) {\n                selectionText = edgeGetSelectedCodeLines(selection);\n            }\n            else {\n                // other browsers can directly use the selection string\n                selectionText = selection.toString();\n            }\n            e.clipboardData.setData('text/plain', selectionText);\n            e.preventDefault();\n        }\n    });\n    function addStyles() {\n        var css = d.createElement('style');\n        css.type = 'text/css';\n        css.innerHTML = format('.{0}{border-collapse:collapse}' +\n            '.{0} td{padding:0}' +\n            '.{1}:before{content:attr({2})}', [\n            TABLE_NAME,\n            NUMBER_LINE_NAME,\n            DATA_ATTR_NAME\n        ]);\n        d.getElementsByTagName('head')[0].appendChild(css);\n    }\n    function initLineNumbersOnLoad(options) {\n        if (d.readyState === 'interactive' || d.readyState === 'complete') {\n            documentReady(options);\n        }\n        else {\n            w.addEventListener('DOMContentLoaded', function () {\n                documentReady(options);\n            });\n        }\n    }\n    function documentReady(options) {\n        try {\n            var blocks = d.querySelectorAll('code.hljs,code.nohighlight');\n            for (var i in blocks) {\n                if (blocks.hasOwnProperty(i)) {\n                    if (!isPluginDisabledForBlock(blocks[i])) {\n                        lineNumbersBlock(blocks[i], options);\n                    }\n                }\n            }\n        }\n        catch (e) {\n            w.console.error('LineNumbers error: ', e);\n        }\n    }\n    function isPluginDisabledForBlock(element) {\n        return element.classList.contains('nohljsln');\n    }\n    function lineNumbersBlock(element, options) {\n        if (typeof element !== 'object') {\n            return;\n        }\n        async(function () {\n            element.innerHTML = lineNumbersInternal(element, options);\n        });\n    }\n    function lineNumbersValue(value, options) {\n        if (typeof value !== 'string') {\n            return;\n        }\n        var element = document.createElement('code');\n        element.innerHTML = value;\n        return lineNumbersInternal(element, options);\n    }\n    function lineNumbersInternal(element, options) {\n        var internalOptions = mapOptions(element, options);\n        duplicateMultilineNodes(element);\n        return addLineNumbersBlockFor(element.innerHTML, internalOptions);\n    }\n    function addLineNumbersBlockFor(inputHtml, options) {\n        var lines = getLines(inputHtml);\n        // if last line contains only carriage return remove it\n        if (lines[lines.length - 1].trim() === '') {\n            lines.pop();\n        }\n        if (lines.length > 1 || options.singleLine) {\n            var html = '';\n            for (var i = 0, l = lines.length; i < l; i++) {\n                html += format('<tr>' +\n                    '<td class=\"{0} {1}\" {3}=\"{5}\">' +\n                    '<div class=\"{2}\" {3}=\"{5}\"></div>' +\n                    '</td>' +\n                    '<td class=\"{0} {4}\" {3}=\"{5}\">' +\n                    '{6}' +\n                    '</td>' +\n                    '</tr>', [\n                    LINE_NAME,\n                    NUMBERS_BLOCK_NAME,\n                    NUMBER_LINE_NAME,\n                    DATA_ATTR_NAME,\n                    CODE_BLOCK_NAME,\n                    i + options.startFrom,\n                    lines[i].length > 0 ? lines[i] : ' '\n                ]);\n            }\n            return format('<table class=\"{0}\">{1}</table>', [TABLE_NAME, html]);\n        }\n        return inputHtml;\n    }\n    /**\n     * @param {HTMLElement} element Code block.\n     * @param {Object} options External API options.\n     * @returns {Object} Internal API options.\n     */\n    function mapOptions(element, options) {\n        options = options || {};\n        return {\n            singleLine: getSingleLineOption(options),\n            startFrom: getStartFromOption(element, options)\n        };\n    }\n    function getSingleLineOption(options) {\n        var defaultValue = false;\n        if (!!options.singleLine) {\n            return options.singleLine;\n        }\n        return defaultValue;\n    }\n    function getStartFromOption(element, options) {\n        var defaultValue = 1;\n        var startFrom = defaultValue;\n        if (isFinite(options.startFrom)) {\n            startFrom = options.startFrom;\n        }\n        // can be overridden because local option is priority\n        var value = getAttribute(element, 'data-ln-start-from');\n        if (value !== null) {\n            startFrom = toNumber(value, defaultValue);\n        }\n        return startFrom;\n    }\n    /**\n     * Recursive method for fix multi-line elements implementation in highlight.js\n     * Doing deep passage on child nodes.\n     * @param {HTMLElement} element\n     */\n    function duplicateMultilineNodes(element) {\n        var nodes = element.childNodes;\n        for (var node in nodes) {\n            if (nodes.hasOwnProperty(node)) {\n                var child = nodes[node];\n                if (getLinesCount(child.textContent) > 0) {\n                    if (child.childNodes.length > 0) {\n                        duplicateMultilineNodes(child);\n                    }\n                    else {\n                        duplicateMultilineNode(child.parentNode);\n                    }\n                }\n            }\n        }\n    }\n    /**\n     * Method for fix multi-line elements implementation in highlight.js\n     * @param {HTMLElement} element\n     */\n    function duplicateMultilineNode(element) {\n        var className = element.className;\n        if (!/hljs-/.test(className)) {\n            return;\n        }\n        var lines = getLines(element.innerHTML);\n        for (var i = 0, result = ''; i < lines.length; i++) {\n            var lineText = lines[i].length > 0 ? lines[i] : ' ';\n            result += format('<span class=\"{0}\">{1}</span>\\n', [className, lineText]);\n        }\n        element.innerHTML = result.trim();\n    }\n    function getLines(text) {\n        if (text.length === 0) {\n            return [];\n        }\n        return text.split(BREAK_LINE_REGEXP);\n    }\n    function getLinesCount(text) {\n        return (text.trim().match(BREAK_LINE_REGEXP) || []).length;\n    }\n    ///\n    /// HELPERS\n    ///\n    function async(func) {\n        w.setTimeout(func, 0);\n    }\n    /**\n     * {@link https://wcoder.github.io/notes/string-format-for-string-formating-in-javascript}\n     * @param {string} format\n     * @param {array} args\n     */\n    function format(format, args) {\n        return format.replace(/\\{(\\d+)\\}/g, function (m, n) {\n            return args[n] !== undefined ? args[n] : m;\n        });\n    }\n    /**\n     * @param {HTMLElement} element Code block.\n     * @param {String} attrName Attribute name.\n     * @returns {String} Attribute value or empty.\n     */\n    function getAttribute(element, attrName) {\n        return element.hasAttribute(attrName) ? element.getAttribute(attrName) : null;\n    }\n    /**\n     * @param {String} str Source string.\n     * @param {Number} fallback Fallback value.\n     * @returns Parsed number or fallback value.\n     */\n    function toNumber(str, fallback) {\n        if (!str) {\n            return fallback;\n        }\n        var number = Number(str);\n        return isFinite(number) ? number : fallback;\n    }\n}\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { activateLineNumbers };\n"],"names":["activateLineNumbers","w","window","d","document","TABLE_NAME","LINE_NAME","CODE_BLOCK_NAME","NUMBERS_BLOCK_NAME","NUMBER_LINE_NAME","DATA_ATTR_NAME","BREAK_LINE_REGEXP","hljs","initLineNumbersOnLoad","lineNumbersBlock","lineNumbersValue","addStyles","console","error","isHljsLnCodeDescendant","domElt","curElt","className","indexOf","parentNode","getHljsLnTable","hljsLnDomElt","nodeName","edgeGetSelectedCodeLines","selection","selectionText","toString","tdAnchor","anchorNode","tdFocus","focusNode","firstLineNumber","parseInt","dataset","lineNumber","lastLineNumber","firstLineText","textContent","lastLineText","tmp","slice","lastIndexOf","selectedText","hljsLnTable","i","codeLineSel","format","codeLineElt","querySelector","addEventListener","e","getSelection","navigator","userAgent","clipboardData","setData","preventDefault","css","createElement","type","innerHTML","getElementsByTagName","appendChild","options","readyState","documentReady","blocks","querySelectorAll","hasOwnProperty","isPluginDisabledForBlock","element","classList","contains","async","lineNumbersInternal","value","internalOptions","mapOptions","duplicateMultilineNodes","addLineNumbersBlockFor","inputHtml","lines","getLines","length","trim","pop","singleLine","html","l","startFrom","getSingleLineOption","getStartFromOption","defaultValue","isFinite","getAttribute","toNumber","nodes","childNodes","node","child","getLinesCount","duplicateMultilineNode","test","result","lineText","text","split","match","func","setTimeout","args","replace","m","n","undefined","attrName","hasAttribute","str","fallback","number","Number"],"sourceRoot":"webpack:///","x_google_ignoreList":[0]}