{"version":3,"file":"main.js","mappings":"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","sources":["./projects/demo/src/app/app.browser.module.ts","./projects/demo/src/app/app.component.ts","./projects/demo/src/app/app.component.html","./projects/demo/src/app/app.providers.ts","./projects/demo/src/app/app.routes.ts","./projects/demo/src/app/constants/demo-path.ts","./projects/demo/src/app/constants/github-api.ts","./projects/demo/src/app/constants/index.ts","./projects/demo/src/app/modules/logo/logo.component.ts","./projects/demo/src/app/modules/logo/logo.template.html","./projects/demo/src/app/modules/nodes/form-node/form-node.component.ts","./projects/demo/src/app/modules/nodes/form-node/form-node.component.html","./projects/demo/src/app/modules/nodes/index.ts","./projects/demo/src/app/modules/nodes/info-node/info-node.component.ts","./projects/demo/src/app/modules/nodes/info-node/info-node.component.html","./projects/demo/src/app/modules/nodes/input-node/input-node.component.ts","./projects/demo/src/app/modules/nodes/input-node/input-node.component.html","./projects/demo/src/app/modules/nodes/label-node/label-node.component.ts","./projects/demo/src/app/modules/nodes/label-node/label-node.component.html","./projects/demo/src/app/modules/nodes/mini-node/mini-node.component.ts","./projects/demo/src/app/modules/nodes/mini-node/mini-node.component.html","./projects/demo/src/app/modules/nodes/output-node/output-node.component.ts","./projects/demo/src/app/modules/nodes/output-node/output-node.component.html","./projects/demo/src/app/modules/nodes/simple-node/simple-node.component.ts","./projects/demo/src/app/modules/nodes/simple-node/simple-node.component.html","./projects/demo/src/main.browser.ts","./projects/demo/src/pages/pages.ts","./projects/demo/src/polyfills.ts","./projects/ng-draw-flow/src/index.ts","./projects/ng-draw-flow/src/lib/components/connections/connection/connection.component.ts","./projects/ng-draw-flow/src/lib/components/connections/connection/connection.component.svg","./projects/ng-draw-flow/src/lib/components/connections/connections.service.ts","./projects/ng-draw-flow/src/lib/components/connections/draft-connection/draft-connection.component.ts","./projects/ng-draw-flow/src/lib/components/connections/draft-connection/draft-connection.component.svg","./projects/ng-draw-flow/src/lib/components/connections/draft-connection/draft-connection.service.ts","./projects/ng-draw-flow/src/lib/components/connections/utils/calculate-distance.util.ts","./projects/ng-draw-flow/src/lib/components/connections/utils/connection-paths/bezier/bezier.ts","./projects/ng-draw-flow/src/lib/components/connections/utils/connection-paths/bezier/helpers/bezier-edge-center.ts","./projects/ng-draw-flow/src/lib/components/connections/utils/connection-paths/bezier/helpers/control-offset.ts","./projects/ng-draw-flow/src/lib/components/connections/utils/connection-paths/bezier/helpers/control-with-curvature.ts","./projects/ng-draw-flow/src/lib/components/connections/utils/connection-paths/bezier/helpers/index.ts","./projects/ng-draw-flow/src/lib/components/connections/utils/connection-paths/bezier/index.ts","./projects/ng-draw-flow/src/lib/components/connections/utils/connection-paths/smooth-step/helpers/get-primary-direction.ts","./projects/ng-draw-flow/src/lib/components/connections/utils/connection-paths/smooth-step/helpers/smooth-step-edge-center.ts","./projects/ng-draw-flow/src/lib/components/connections/utils/connection-paths/smooth-step/index.ts","./projects/ng-draw-flow/src/lib/components/connections/utils/connection-paths/smooth-step/path-parts/bend.ts","./projects/ng-draw-flow/src/lib/components/connections/utils/connection-paths/smooth-step/path-parts/waypoints.ts","./projects/ng-draw-flow/src/lib/components/connections/utils/connection-paths/smooth-step/smooth-step.consts.ts","./projects/ng-draw-flow/src/lib/components/connections/utils/connection-paths/smooth-step/smooth-step.ts","./projects/ng-draw-flow/src/lib/components/connections/utils/get-coonector-dataset.util.ts","./projects/ng-draw-flow/src/lib/components/connections/utils/index.ts","./projects/ng-draw-flow/src/lib/components/connections/utils/point.ts","./projects/ng-draw-flow/src/lib/components/connectors/base-connector.ts","./projects/ng-draw-flow/src/lib/components/connectors/index.ts","./projects/ng-draw-flow/src/lib/components/connectors/input.component.ts","./projects/ng-draw-flow/src/lib/components/connectors/output.component.ts","./projects/ng-draw-flow/src/lib/components/node/node.component.ts","./projects/ng-draw-flow/src/lib/components/node/node.component.html","./projects/ng-draw-flow/src/lib/components/pan-zoom/pan-zoom.component.ts","./projects/ng-draw-flow/src/lib/components/pan-zoom/pan-zoom.component.html","./projects/ng-draw-flow/src/lib/components/pan-zoom/pan-zoom.const.ts","./projects/ng-draw-flow/src/lib/components/pan-zoom/pan-zoom.options.ts","./projects/ng-draw-flow/src/lib/components/pan-zoom/pan-zoom.service.ts","./projects/ng-draw-flow/src/lib/components/pan-zoom/zoom/index.ts","./projects/ng-draw-flow/src/lib/components/pan-zoom/zoom/zoom.directive.ts","./projects/ng-draw-flow/src/lib/components/pan-zoom/zoom/zoom.service.ts","./projects/ng-draw-flow/src/lib/components/scene/scene.component.ts","./projects/ng-draw-flow/src/lib/components/scene/scene.component.html","./projects/ng-draw-flow/src/lib/consts/handlers.ts","./projects/ng-draw-flow/src/lib/consts/index.ts","./projects/ng-draw-flow/src/lib/consts/initial-coordinates.ts","./projects/ng-draw-flow/src/lib/directives/drag-drop/drag-drop.directive.ts","./projects/ng-draw-flow/src/lib/directives/drag-drop/drag-drop.enum.ts","./projects/ng-draw-flow/src/lib/directives/drag-drop/drag-drop.interface.ts","./projects/ng-draw-flow/src/lib/directives/drag-drop/drag-drop.service.ts","./projects/ng-draw-flow/src/lib/directives/drag-drop/index.ts","./projects/ng-draw-flow/src/lib/directives/errors/errors.directive.ts","./projects/ng-draw-flow/src/lib/directives/errors/index.ts","./projects/ng-draw-flow/src/lib/directives/index.ts","./projects/ng-draw-flow/src/lib/directives/resize-observer/index.ts","./projects/ng-draw-flow/src/lib/directives/resize-observer/resize-observer.directive.ts","./projects/ng-draw-flow/src/lib/directives/selectable-element/index.ts","./projects/ng-draw-flow/src/lib/directives/selectable-element/selectable-element.directive.ts","./projects/ng-draw-flow/src/lib/helpers/clamp.ts","./projects/ng-draw-flow/src/lib/helpers/collect-invalid-node-ids.ts","./projects/ng-draw-flow/src/lib/helpers/connector.ts","./projects/ng-draw-flow/src/lib/helpers/deep-equal.ts","./projects/ng-draw-flow/src/lib/helpers/distance-between-points.ts","./projects/ng-draw-flow/src/lib/helpers/distance-between-touches.ts","./projects/ng-draw-flow/src/lib/helpers/events.ts","./projects/ng-draw-flow/src/lib/helpers/index.ts","./projects/ng-draw-flow/src/lib/helpers/px.ts","./projects/ng-draw-flow/src/lib/ng-draw-flow-node.base.ts","./projects/ng-draw-flow/src/lib/ng-draw-flow.component.ts","./projects/ng-draw-flow/src/lib/ng-draw-flow.component.html","./projects/ng-draw-flow/src/lib/ng-draw-flow.configs.ts","./projects/ng-draw-flow/src/lib/ng-draw-flow.interfaces.ts","./projects/ng-draw-flow/src/lib/ng-draw-flow.token.ts","./projects/ng-draw-flow/src/lib/services/coordinates.service.ts","./projects/ng-draw-flow/src/lib/services/selection.service.ts","./projects/ng-draw-flow/src/lib/validators/cycle-detection/cycle-detection.validator.ts","./projects/ng-draw-flow/src/lib/validators/cycle-detection/helpers.ts","./projects/ng-draw-flow/src/lib/validators/index.ts","./projects/ng-draw-flow/src/lib/validators/invalid-nodes.token.ts","./projects/ng-draw-flow/src/lib/validators/isolated-nodes/isolated-nodes.validator.ts"],"sourcesContent":["import {HttpClient, HttpClientModule} from '@angular/common/http';\nimport {NgModule, SecurityContext} from '@angular/core';\nimport {BrowserModule} from '@angular/platform-browser';\nimport {BrowserAnimationsModule} from '@angular/platform-browser/animations';\nimport {TuiAddonDoc} from '@taiga-ui/addon-doc';\nimport {TuiAlert, TuiDialog, TuiLink, TuiRoot} from '@taiga-ui/core';\nimport {NG_EVENT_PLUGINS} from '@taiga-ui/event-plugins';\nimport {MarkdownModule} from 'ngx-markdown';\n\nimport {AppComponent} from './app.component';\nimport {APP_PROVIDERS} from './app.providers';\nimport {AppRoutingModule} from './app.routes';\n\n@NgModule({\n    imports: [\n        BrowserModule.withServerTransition({\n            appId: 'demo',\n        }),\n        AppRoutingModule,\n        BrowserAnimationsModule,\n        TuiRoot,\n        TuiDialog,\n        TuiAlert,\n        HttpClientModule,\n        MarkdownModule.forRoot({\n            loader: HttpClient,\n            sanitize: SecurityContext.NONE,\n        }),\n        ...TuiAddonDoc,\n        TuiLink,\n    ],\n    declarations: [AppComponent],\n    providers: [APP_PROVIDERS, NG_EVENT_PLUGINS],\n    bootstrap: [AppComponent],\n})\nexport class AppBrowserModule {}\n","import {ChangeDetectionStrategy, Component} from '@angular/core';\n\n// eslint-disable-next-line @angular-eslint/prefer-standalone\n@Component({\n    selector: 'my-app',\n    templateUrl: './app.component.html',\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AppComponent {}\n","<tui-root>\n    <tui-doc-main />\n    <router-outlet />\n</tui-root>\n","import {isPlatformBrowser, LocationStrategy, PathLocationStrategy} from '@angular/common';\nimport type {Provider} from '@angular/core';\nimport {inject, PLATFORM_ID} from '@angular/core';\nimport {provideNgDrawFlowConfigs} from '@ng-draw-flow/core';\nimport {\n    TUI_DOC_DEFAULT_TABS,\n    TUI_DOC_LOGO,\n    TUI_DOC_PAGES,\n    TUI_DOC_TITLE,\n} from '@taiga-ui/addon-doc';\nimport {HIGHLIGHT_OPTIONS} from 'ngx-highlightjs';\n\nimport {DEMO_PAGES} from '../pages/pages';\nimport {LOGO_CONTENT} from './modules/logo/logo.component';\nimport {\n    FormNodeComponent,\n    InfoNodeComponent,\n    InputNodeComponent,\n    MiniNodeComponent,\n    OutputNodeComponent,\n    SimpleNodeComponent,\n} from './modules/nodes';\n\nexport const APP_PROVIDERS: Provider[] = [\n    {\n        provide: LocationStrategy,\n        useClass: PathLocationStrategy,\n    },\n    {\n        provide: TUI_DOC_TITLE,\n        useValue: 'NgDrawFlow | ',\n    },\n    {\n        provide: TUI_DOC_LOGO,\n        useValue: LOGO_CONTENT,\n    },\n    {\n        provide: TUI_DOC_DEFAULT_TABS,\n        useValue: ['Description and examples', 'API'],\n    },\n    {\n        provide: TUI_DOC_PAGES,\n        useValue: DEMO_PAGES,\n    },\n    {\n        provide: HIGHLIGHT_OPTIONS,\n        useFactory: () => {\n            const isBrowser = isPlatformBrowser(inject(PLATFORM_ID));\n\n            return {\n                coreLibraryLoader: async () => import('highlight.js/lib/core'),\n                lineNumbersLoader: async () =>\n                    // SSR ReferenceError: window is not defined\n                    isBrowser\n                        ? import('ngx-highlightjs/line-numbers' as string)\n                        : Promise.resolve(),\n                languages: {\n                    typescript: async () =>\n                        import('highlight.js/lib/languages/typescript'),\n                    less: async () => import('highlight.js/lib/languages/less'),\n                    xml: async () => import('highlight.js/lib/languages/xml'),\n                },\n            };\n        },\n    },\n    provideNgDrawFlowConfigs({\n        nodes: {\n            infoNode: InfoNodeComponent,\n            simpleNode: SimpleNodeComponent,\n            inputNode: InputNodeComponent,\n            outputNode: OutputNodeComponent,\n            miniNode: MiniNodeComponent,\n            formNode: FormNodeComponent,\n        },\n    }),\n];\n","import {NgModule} from '@angular/core';\nimport type {Routes} from '@angular/router';\nimport {RouterModule} from '@angular/router';\nimport {DemoPath} from '@demo/constants';\n\nexport const appRoutes: Routes = [\n    // Quickstart\n    {\n        path: DemoPath.Quickstart,\n        loadComponent: async () =>\n            import('../pages/documentation/quickstart/quickstart.component'),\n        data: {\n            title: 'Quickstart',\n        },\n    },\n    {\n        path: DemoPath.TermsAndDefinitions,\n        loadComponent: async () =>\n            import(\n                '../pages/documentation/terms-and-definitions/terms-and-definitions.component'\n            ),\n        data: {\n            title: 'Terms and Definitions',\n        },\n    },\n    {\n        path: DemoPath.ConfigurationAndPublicApi,\n        loadComponent: async () =>\n            import(\n                '../pages/documentation/configuration-and-public-api/configuration-and-public-api.component'\n            ),\n        data: {\n            title: 'Configuration & Public API',\n        },\n    },\n    {\n        path: DemoPath.PanZoom,\n        loadComponent: async () =>\n            import(\n                '../pages/documentation/pan-zoom-configuration/pan-zoom-configuration.component'\n            ),\n        data: {\n            title: 'PanZoom Configuration',\n        },\n    },\n    {\n        path: DemoPath.Nodes,\n        loadComponent: async () =>\n            import('../pages/documentation/creating-nodes/creating-nodes.component'),\n        data: {\n            title: 'Creating Nodes',\n        },\n    },\n    {\n        path: DemoPath.Connectors,\n        loadComponent: async () =>\n            import('../pages/documentation/connectors/connectors.component'),\n        data: {\n            title: 'Connectors',\n        },\n    },\n    {\n        path: DemoPath.Connections,\n        loadComponent: async () =>\n            import('../pages/documentation/connections/connections.component'),\n        data: {\n            title: 'Connection Lines',\n        },\n    },\n    {\n        path: DemoPath.Labels,\n        loadComponent: async () =>\n            import('../pages/documentation/labels/labels.component'),\n        data: {\n            title: 'Labels',\n        },\n    },\n    {\n        path: DemoPath.Validation,\n        loadComponent: async () =>\n            import('../pages/documentation/validation/validation.component'),\n        data: {\n            title: 'Validation',\n        },\n    },\n    // Examples\n    {\n        path: DemoPath.SimpleExample,\n        loadComponent: async () =>\n            import('../pages/examples/simple-example/simple-example.component'),\n        data: {\n            title: 'Simple example',\n        },\n    },\n    {\n        path: DemoPath.Overview,\n        loadComponent: async () =>\n            import('../pages/examples/overview/overview.component'),\n        data: {\n            title: 'Feature Overview',\n        },\n    },\n    {\n        path: DemoPath.Editor,\n        loadComponent: async () => import('../pages/examples/editor/editor.component'),\n        data: {\n            title: 'Editor example',\n        },\n    },\n    {\n        path: DemoPath.StressTest,\n        loadComponent: async () =>\n            import('../pages/examples/stress-test/stress-test.component'),\n        data: {\n            title: 'Stress Test',\n        },\n    },\n    {\n        path: '**',\n        redirectTo: DemoPath.Quickstart,\n    },\n];\n\n@NgModule({\n    imports: [\n        RouterModule.forRoot(appRoutes, {\n            initialNavigation: 'enabledBlocking',\n            scrollPositionRestoration: 'enabled',\n        }),\n    ],\n    exports: [RouterModule],\n})\nexport class AppRoutingModule {}\n","export const DemoPath = {\n    Quickstart: 'documentation/quickstart',\n    TermsAndDefinitions: 'documentation/terms-and-definitions',\n    ConfigurationAndPublicApi: 'documentation/configuration-and-public-api',\n    PanZoom: 'documentation/pan-zoom-configuration',\n    Nodes: 'documentation/creating-nodes',\n    Connectors: 'documentation/connectors',\n    Connections: 'documentation/connections',\n    Labels: 'documentation/labels',\n    Validation: 'documentation/validation',\n    SimpleExample: 'examples/simple-example',\n    Overview: 'examples/overview',\n    Editor: 'examples/editor',\n    StressTest: 'examples/stress-test',\n    CustomNodes: 'examples/nodes-example/custom-nodes-example',\n} as const;\n","export const GITHUB_API = 'https://api.github.com/repos/taiga-family/ng-draw-flow';\n","export * from './demo-path';\nexport * from './github-api';\n","import {HttpClient} from '@angular/common/http';\nimport type {OnInit} from '@angular/core';\nimport {\n    ChangeDetectionStrategy,\n    Component,\n    DestroyRef,\n    inject,\n    signal,\n} from '@angular/core';\nimport {takeUntilDestroyed} from '@angular/core/rxjs-interop';\nimport {RouterLink} from '@angular/router';\nimport {TuiButton, TuiIcon, TuiLink} from '@taiga-ui/core';\nimport {TuiBadgedContent} from '@taiga-ui/kit';\nimport {PolymorpheusComponent} from '@taiga-ui/polymorpheus';\n\nimport {GITHUB_API} from '../../constants';\n\n@Component({\n    standalone: true,\n    selector: 'logo',\n    imports: [RouterLink, TuiBadgedContent, TuiButton, TuiIcon, TuiLink],\n    templateUrl: './logo.template.html',\n    styleUrls: ['./logo.style.less'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class LogoComponent implements OnInit {\n    protected readonly stars = signal('');\n    private readonly destroyRef = inject(DestroyRef);\n    private readonly http = inject(HttpClient);\n\n    public ngOnInit(): void {\n        this.http\n            .get<Record<string, any>>(GITHUB_API)\n            .pipe(takeUntilDestroyed(this.destroyRef))\n            .subscribe((response) =>\n                this.stars.set(\n                    Intl.NumberFormat('en', {notation: 'compact'}).format(\n                        response['stargazers_count'],\n                    ),\n                ),\n            );\n    }\n}\n\nexport const LOGO_CONTENT = new PolymorpheusComponent(LogoComponent);\n","<div class=\"container\">\n    <a\n        routerLink=\"/\"\n        tuiLink\n        class=\"logo-link\"\n    >\n        <span class=\"logo-name\">\n            <img\n                alt=\"ng-draw-flow logo\"\n                src=\"assets/icons/logo.svg\"\n                class=\"logo\"\n            />\n            NgDrawFlow\n        </span>\n    </a>\n\n    <img\n        alt=\"by t-bank\"\n        src=\"assets/icons/by.svg\"\n        class=\"by\"\n    />\n\n    <div class=\"link-group-container link-group-items\">\n        <tui-badged-content class=\"app-link\">\n            <tui-icon\n                icon=\"@tui.star\"\n                size=\"s\"\n                tuiSlot=\"bottom\"\n                [style.color]=\"'orange'\"\n                [style.font-size.rem]=\"1\"\n            />\n\n            <a\n                href=\"https://github.com/taiga-family/ng-draw-flow\"\n                rel=\"noreferrer\"\n                target=\"_blank\"\n                title=\"NgDrawFlow source code on GitHub\"\n            >\n                <button\n                    appearance=\"outline-grayscale\"\n                    size=\"s\"\n                    tuiButton\n                    type=\"button\"\n                    class=\"app-link\"\n                >\n                    <tui-icon\n                        icon=\"@tui.github\"\n                        [style.height.rem]=\"1\"\n                    />\n                    {{ stars() }}\n                </button>\n            </a>\n        </tui-badged-content>\n\n        <a\n            appearance=\"icon\"\n            href=\"https://codesandbox.io/p/devbox/ng-drae-flow-demo-y9qd4s?file=%2Fsrc%2Fapp%2Fapp.component.ts\"\n            iconStart=\"assets/icons/codesandbox.svg\"\n            rel=\"noreferrer\"\n            target=\"_blank\"\n            title=\"Test it in CodeSandbox\"\n            tuiLink\n            class=\"app-link\"\n        ></a>\n    </div>\n</div>\n","import {CommonModule} from '@angular/common';\nimport type {AfterViewInit} from '@angular/core';\nimport {\n    ChangeDetectionStrategy,\n    Component,\n    DestroyRef,\n    inject,\n    Input,\n} from '@angular/core';\nimport {takeUntilDestroyed} from '@angular/core/rxjs-interop';\nimport {FormControl, FormGroup, ReactiveFormsModule, Validators} from '@angular/forms';\nimport {DfInputComponent, DfOutputComponent, DrawFlowBaseNode} from '@ng-draw-flow/core';\nimport {TuiButton} from '@taiga-ui/core';\nimport {TuiInputModule, TuiTextfieldControllerModule} from '@taiga-ui/legacy';\n\ninterface NodeForm {\n    field1: FormGroup<NodeFormGroup>;\n    field2: FormGroup<NodeFormGroup>;\n}\n\ninterface NodeFormGroup {\n    connectorId: FormControl<string | null>;\n    fieldValue: FormControl<string | null>;\n}\n\n@Component({\n    standalone: true,\n    selector: 'app-form-node',\n    imports: [\n        CommonModule,\n        DfInputComponent,\n        DfOutputComponent,\n        ReactiveFormsModule,\n        TuiButton,\n        TuiInputModule,\n        TuiTextfieldControllerModule,\n    ],\n    templateUrl: './form-node.component.html',\n    styleUrls: ['./form-node.component.less'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    host: {\n        '(keydown.delete.stop)': '0',\n        '(keydown.backspace.stop)': '0',\n    },\n})\nexport class FormNodeComponent extends DrawFlowBaseNode implements AfterViewInit {\n    public form = new FormGroup<NodeForm>({\n        field1: new FormGroup<NodeFormGroup>({\n            connectorId: new FormControl<string>('node-5-output-1'),\n            fieldValue: new FormControl<string>('', [Validators.required]),\n        }),\n        field2: new FormGroup<NodeFormGroup>({\n            connectorId: new FormControl<string>('node-5-output-2'),\n            fieldValue: new FormControl<string>('', [Validators.required]),\n        }),\n    });\n\n    @Input()\n    public override set invalid(value: boolean) {\n        super.invalid = value;\n    }\n\n    public override get invalid(): boolean {\n        const formInvalid = Object.values(this.form.controls).some(\n            (fieldGroup: FormGroup<NodeFormGroup>): boolean =>\n                fieldGroup.controls.fieldValue.touched &&\n                fieldGroup.controls.fieldValue.invalid,\n        );\n\n        return super.invalid || formInvalid;\n    }\n\n    private readonly destroyRef = inject(DestroyRef);\n\n    public get fieldNames(): string[] {\n        return Object.keys(this.form.controls);\n    }\n\n    public getConnectorId(fieldName: string | null): string | null {\n        if (!fieldName) {\n            return null;\n        }\n\n        const group = this.form.get(fieldName) as FormGroup<NodeFormGroup>;\n\n        return group.controls.connectorId.value;\n    }\n\n    public ngAfterViewInit(): void {\n        this.form.valueChanges\n            .pipe(takeUntilDestroyed(this.destroyRef))\n            .subscribe((value) => {\n                this.model.value = value;\n            });\n    }\n\n    public add(): void {\n        const index = Object.keys(this.form.controls).length + 1;\n        const newFieldKey = `field${index}`;\n        const newField = new FormGroup({\n            connectorId: new FormControl(`node-5-output-${index}`),\n            fieldValue: new FormControl(''),\n        });\n\n        // @ts-ignore\n        this.form.addControl(newFieldKey, newField);\n    }\n}\n","<df-input\n    *ngIf=\"!startNode\"\n    class=\"input\"\n    [connectorData]=\"{nodeId, connectorId: nodeId + '-input-1', single: false}\"\n/>\n\n<div class=\"tui-space_bottom-4 tui-text_body-s\">\n    {{ model.text }}\n</div>\n\n<form\n    tuiTheme=\"light\"\n    [formGroup]=\"form\"\n>\n    <div\n        *ngFor=\"let fieldName of fieldNames; let i = index\"\n        [formGroupName]=\"fieldName\"\n    >\n        <div class=\"field tui-space_bottom-4\">\n            <tui-input\n                formControlName=\"fieldValue\"\n                [tuiTextfieldSize]=\"'s'\"\n            />\n\n            <ng-container *ngIf=\"!!getConnectorId(fieldName)\">\n                <df-output\n                    class=\"output\"\n                    [connectorData]=\"{nodeId, connectorId: getConnectorId(fieldName)!, single: false}\"\n                />\n            </ng-container>\n        </div>\n    </div>\n</form>\n\n<button\n    size=\"s\"\n    tuiButton\n    type=\"button\"\n    (click)=\"add()\"\n>\n    Add field\n</button>\n","export * from './form-node/form-node.component';\nexport * from './info-node/info-node.component';\nexport * from './input-node/input-node.component';\nexport * from './label-node/label-node.component';\nexport * from './mini-node/mini-node.component';\nexport * from './output-node/output-node.component';\nexport * from './simple-node/simple-node.component';\n","import {CommonModule} from '@angular/common';\nimport {ChangeDetectionStrategy, Component} from '@angular/core';\nimport {DfInputComponent, DfOutputComponent, DrawFlowBaseNode} from '@ng-draw-flow/core';\n\n@Component({\n    standalone: true,\n    selector: 'app-info-node',\n    imports: [CommonModule, DfInputComponent, DfOutputComponent],\n    templateUrl: './info-node.component.html',\n    styleUrls: ['./info-node.component.less'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class InfoNodeComponent extends DrawFlowBaseNode {}\n","<p class=\"tui-text_body-xs\">\n    This node is your first step towards mastering the powerful features of our editor. Feel free to move nodes and\n    connections around to better organize your graphs.\n</p>\n\n<p class=\"tui-text_body-xs\">Deleting Elements:</p>\n\n<ul class=\"tui-list tui-list_extra-small\">\n    <li class=\"tui-list__item\">Select the node or connection you wish to remove.</li>\n    <li class=\"tui-list__item\">\n        Press the\n        <b>Backspace</b>\n        or\n        <b>Delete</b>\n        key.\n    </li>\n</ul>\n\n<p class=\"tui-text_body-xs\">Explore, experiment, and create complex data structures with ease!</p>\n","import {ChangeDetectionStrategy, Component} from '@angular/core';\nimport {\n    DfConnectorPosition,\n    DfInputComponent,\n    DrawFlowBaseNode,\n} from '@ng-draw-flow/core';\n\n@Component({\n    standalone: true,\n    selector: 'app-input-node',\n    imports: [DfInputComponent],\n    templateUrl: './input-node.component.html',\n    styleUrls: ['./input-node.component.less'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class InputNodeComponent extends DrawFlowBaseNode {\n    protected connectorPosition = DfConnectorPosition;\n}\n","<df-input\n    class=\"input input_left\"\n    [connectorData]=\"{nodeId, connectorId: nodeId + '-input-1', single: false}\"\n    [position]=\"connectorPosition.Left\"\n/>\n\n<df-input\n    class=\"input input_top\"\n    [connectorData]=\"{nodeId, connectorId: nodeId + '-input-2', single: false}\"\n    [position]=\"connectorPosition.Top\"\n/>\n\n<p class=\"tui-text_body-xs\">{{ model.text }}</p>\n\n<df-input\n    class=\"input input_right\"\n    [connectorData]=\"{nodeId, connectorId: nodeId + '-input-3', single: false}\"\n    [position]=\"connectorPosition.Right\"\n/>\n\n<df-input\n    class=\"input input_bottom\"\n    [connectorData]=\"{nodeId, connectorId: nodeId + '-input-4', single: false}\"\n    [position]=\"connectorPosition.Bottom\"\n/>\n","import {AsyncPipe, NgForOf, NgIf} from '@angular/common';\nimport {ChangeDetectionStrategy, Component} from '@angular/core';\nimport {DfInputComponent, DfOutputComponent, DrawFlowBaseNode} from '@ng-draw-flow/core';\nimport {TuiButton} from '@taiga-ui/core';\n\n@Component({\n    standalone: true,\n    selector: 'app-label-node',\n    imports: [AsyncPipe, DfInputComponent, DfOutputComponent, NgForOf, NgIf, TuiButton],\n    templateUrl: './label-node.component.html',\n    styleUrls: ['./label-node.component.less'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class LabelNodeComponent extends DrawFlowBaseNode {\n    public outputConnectors: number[] = [0];\n\n    public addOutputConnector(): void {\n        this.outputConnectors.push(this.outputs.length);\n    }\n}\n","<p class=\"tui-text_body-xs\">{{ model.text }}</p>\n\n<div class=\"output-wrapper\">\n    <ng-container *ngFor=\"let output of outputConnectors; let i = index\">\n        <df-output\n            class=\"output\"\n            [connectionLabel]=\"{content: i}\"\n            [connectorData]=\"{nodeId, connectorId: nodeId + '-output-' + (i + 1), single: false}\"\n        />\n    </ng-container>\n</div>\n\n<button\n    size=\"xs\"\n    tuiButton\n    type=\"button\"\n    (click)=\"addOutputConnector()\"\n>\n    Add output\n</button>\n","import {CommonModule} from '@angular/common';\nimport {ChangeDetectionStrategy, Component} from '@angular/core';\nimport {DfInputComponent, DfOutputComponent, DrawFlowBaseNode} from '@ng-draw-flow/core';\n\n@Component({\n    standalone: true,\n    selector: 'app-mini-node',\n    imports: [CommonModule, DfInputComponent, DfOutputComponent],\n    templateUrl: './mini-node.component.html',\n    styleUrls: ['./mini-node.component.less'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MiniNodeComponent extends DrawFlowBaseNode {}\n","<df-input\n    *ngIf=\"!startNode\"\n    class=\"input\"\n    [connectorData]=\"{nodeId, connectorId: 'input-1', single: false}\"\n/>\n\n<p class=\"tui-text_body-xs\">Node {{ model.index }}</p>\n\n<df-output\n    *ngIf=\"!endNode\"\n    class=\"output\"\n    [connectorData]=\"{nodeId, connectorId: 'output-1', single: false}\"\n/>\n","import {ChangeDetectionStrategy, Component} from '@angular/core';\nimport {\n    DfConnectorPosition,\n    DfOutputComponent,\n    DrawFlowBaseNode,\n} from '@ng-draw-flow/core';\n\n@Component({\n    standalone: true,\n    selector: 'app-output-node',\n    imports: [DfOutputComponent],\n    templateUrl: './output-node.component.html',\n    styleUrls: ['./output-node.component.less'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OutputNodeComponent extends DrawFlowBaseNode {\n    protected connectorPosition = DfConnectorPosition;\n}\n","<df-output\n    class=\"output output_left\"\n    [connectorData]=\"{nodeId, connectorId: nodeId + '-output-1', single: false}\"\n    [position]=\"connectorPosition.Left\"\n/>\n\n<df-output\n    class=\"output output_top\"\n    [connectorData]=\"{nodeId, connectorId: nodeId + '-output-2', single: false}\"\n    [position]=\"connectorPosition.Top\"\n/>\n\n<p class=\"tui-text_body-xs\">{{ model.text }}</p>\n\n<df-output\n    class=\"output output_right\"\n    [connectorData]=\"{nodeId, connectorId: nodeId + '-output-3', single: false}\"\n    [position]=\"connectorPosition.Right\"\n/>\n\n<df-output\n    class=\"output output_bottom\"\n    [connectorData]=\"{nodeId, connectorId: nodeId + '-output-4', single: false}\"\n    [position]=\"connectorPosition.Bottom\"\n/>\n","import {AsyncPipe, NgIf} from '@angular/common';\nimport {ChangeDetectionStrategy, Component} from '@angular/core';\nimport {DfInputComponent, DfOutputComponent, DrawFlowBaseNode} from '@ng-draw-flow/core';\n\n@Component({\n    standalone: true,\n    selector: 'app-simple-node',\n    imports: [AsyncPipe, DfInputComponent, DfOutputComponent, NgIf],\n    templateUrl: './simple-node.component.html',\n    styleUrls: ['./simple-node.component.less'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SimpleNodeComponent extends DrawFlowBaseNode {}\n","<df-input\n    *ngIf=\"!startNode\"\n    class=\"input\"\n    [connectorData]=\"{nodeId, connectorId: nodeId + '-input-1', single: false}\"\n/>\n\n<p class=\"tui-text_body-xs\">{{ model.text }}</p>\n\n<df-output\n    *ngIf=\"!endNode\"\n    class=\"output\"\n    [connectorData]=\"{nodeId, connectorId: nodeId + '-output-1', single: false}\"\n/>\n","import './polyfills';\n\nimport {platformBrowserDynamic} from '@angular/platform-browser-dynamic';\n\nimport {AppBrowserModule} from './app/app.browser.module';\n\ndocument.addEventListener('DOMContentLoaded', () => {\n    platformBrowserDynamic()\n        .bootstrapModule(AppBrowserModule)\n        .then((ref) => {\n            const windowRef: any = window;\n\n            // Ensure Angular destroys itself on hot reloads for Stackblitz\n            if (windowRef.ngRef) {\n                windowRef.ngRef.destroy();\n            }\n\n            windowRef.ngRef = ref;\n        })\n        .catch((err: unknown) => console.error(err));\n});\n","import {DemoPath} from '@demo/constants';\nimport type {TuiDocRoutePages} from '@taiga-ui/addon-doc';\n\nexport const DEMO_PAGES: TuiDocRoutePages = [\n    {\n        section: 'Documentation',\n        title: 'Quickstart',\n        route: DemoPath.Quickstart,\n    },\n    {\n        section: 'Documentation',\n        title: 'Terms and Definitions',\n        route: DemoPath.TermsAndDefinitions,\n    },\n    {\n        section: 'Documentation',\n        title: 'Configuration & Public API',\n        route: DemoPath.ConfigurationAndPublicApi,\n    },\n    {\n        section: 'Documentation',\n        title: 'PanZoom Configuration',\n        route: DemoPath.PanZoom,\n    },\n    {\n        section: 'Documentation',\n        title: 'Creating Nodes',\n        route: DemoPath.Nodes,\n    },\n    {\n        section: 'Documentation',\n        title: 'Connectors',\n        route: DemoPath.Connectors,\n    },\n    {\n        section: 'Documentation',\n        title: 'Connection Lines',\n        route: DemoPath.Connections,\n    },\n    {\n        section: 'Documentation',\n        title: 'Labels',\n        route: DemoPath.Labels,\n    },\n    {\n        section: 'Documentation',\n        title: 'Validation',\n        route: DemoPath.Validation,\n    },\n    {\n        section: 'Examples',\n        title: 'Simple example',\n        route: DemoPath.SimpleExample,\n    },\n    {\n        section: 'Examples',\n        title: 'Feature Overview',\n        route: DemoPath.Overview,\n    },\n    {\n        section: 'Examples',\n        title: 'Editor example',\n        route: DemoPath.Editor,\n    },\n    {\n        section: 'Examples',\n        title: 'Stress Test',\n        route: DemoPath.StressTest,\n    },\n];\n","import 'zone.js';\n","export * from './lib/components/connectors';\nexport * from './lib/components/pan-zoom/pan-zoom.options';\nexport * from './lib/directives/errors/errors.directive';\nexport * from './lib/directives/resize-observer';\nexport * from './lib/ng-draw-flow.component';\nexport * from './lib/ng-draw-flow.configs';\nexport * from './lib/ng-draw-flow.interfaces';\nexport * from './lib/ng-draw-flow.token';\nexport * from './lib/ng-draw-flow-node.base';\nexport * from './lib/validators';\n","import {AsyncPipe, NgIf} from '@angular/common';\nimport {\n    ChangeDetectionStrategy,\n    Component,\n    EventEmitter,\n    inject,\n    Input,\n    Output,\n} from '@angular/core';\nimport {PolymorpheusOutlet} from '@taiga-ui/polymorpheus';\nimport type {BehaviorSubject, Observable} from 'rxjs';\nimport {\n    animationFrameScheduler,\n    asyncScheduler,\n    combineLatest,\n    concat,\n    delay,\n    distinctUntilChanged,\n    map,\n    observeOn,\n    of,\n    shareReplay,\n    skip,\n    startWith,\n    switchMap,\n} from 'rxjs';\n\nimport {SelectableElementDirective} from '../../../directives';\nimport {createConnectorHash, deepEqual} from '../../../helpers';\nimport {DRAW_FLOW_OPTIONS} from '../../../ng-draw-flow.configs';\nimport type {\n    DfArrowheadOptions,\n    DfConnectorData,\n    DfDataConnection,\n    DfDataConnector,\n    DfOptions,\n} from '../../../ng-draw-flow.interfaces';\nimport {DfConnectionType} from '../../../ng-draw-flow.interfaces';\nimport {CoordinatesService} from '../../../services/coordinates.service';\nimport {ConnectionsService} from '../connections.service';\nimport {createBezierPath, createSmoothStepPath} from '../utils';\n\n@Component({\n    standalone: true,\n    selector: 'df-connection',\n    imports: [AsyncPipe, NgIf, PolymorpheusOutlet, SelectableElementDirective],\n    templateUrl: './connection.component.svg',\n    styleUrls: ['../connection.component.less'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    host: {\n        '(document:keydown.delete)': 'this.handleKeyboardEvent($event)',\n        '(document:keydown.backspace)': 'this.handleKeyboardEvent($event)',\n    },\n})\nexport class ConnectionComponent {\n    private readonly connectionsService = inject(ConnectionsService);\n    private readonly coordinatesService = inject(CoordinatesService);\n    private readonly options = inject<DfOptions>(DRAW_FLOW_OPTIONS);\n    protected selected = false;\n    private readonly arrowhead: DfArrowheadOptions = this.options.connection.arrowhead;\n    public deletable = this.options.options.connectionsDeletable;\n\n    protected readonly markerEnd =\n        this.arrowhead.type === 'none'\n            ? null\n            : `url(#df-arrowhead-${this.arrowhead.type})`;\n\n    private readonly arrowWidth = this.arrowhead.width;\n    private readonly arrowHeight = this.arrowhead.height;\n\n    protected readonly arrowMarkerWidth = this.arrowWidth + this.arrowHeight;\n    protected readonly arrowMarkerHeight = this.arrowHeight * 2;\n\n    protected readonly arrowViewBox = `-${this.arrowMarkerWidth} -${this.arrowMarkerHeight / 2} ${this.arrowMarkerWidth} ${this.arrowMarkerHeight}`;\n    protected readonly arrowPoints = `-${this.arrowWidth},-${this.arrowHeight / 2} 0,0 -${this.arrowWidth},${this.arrowHeight / 2}`;\n    protected readonly arrowClosedPoints = `${this.arrowPoints} -${this.arrowWidth},-${this.arrowHeight / 2}`;\n\n    @Input()\n    public connection!: DfDataConnection;\n\n    @Output()\n    protected readonly connectionDeleted = new EventEmitter<void>();\n\n    @Output()\n    protected readonly connectionSelected = new EventEmitter<void>();\n\n    private readonly pathWithLabel$: Observable<{\n        path: string;\n        labelX: number;\n        labelY: number;\n    }> = of(null).pipe(\n        observeOn(asyncScheduler),\n        switchMap(() =>\n            combineLatest([\n                this.getConnectionPoint(this.connection?.source),\n                this.getConnectionPoint(this.connection?.target),\n            ]),\n        ),\n        switchMap(([sourcePoint, targetPoint]) => {\n            if (!sourcePoint || !targetPoint) {\n                console.warn('One of the connection points not found');\n\n                return of([]);\n            }\n\n            return of([sourcePoint, targetPoint]);\n        }),\n        distinctUntilChanged(deepEqual),\n        observeOn(animationFrameScheduler),\n        map(([start, end]) => {\n            if (!start || !end) {\n                return {path: '', labelX: 0, labelY: 0};\n            }\n\n            switch (this.options.connection.type) {\n                case DfConnectionType.SmoothStep: {\n                    const [path, labelX, labelY] = createSmoothStepPath(\n                        start,\n                        end,\n                        this.options.connection.curvature,\n                    );\n\n                    return {path, labelX, labelY};\n                }\n                case DfConnectionType.Bezier:\n                default: {\n                    const curvature = this.options.connection.curvature;\n                    const [path, labelX, labelY] = createBezierPath(\n                        start,\n                        end,\n                        curvature,\n                    );\n\n                    return {path, labelX, labelY};\n                }\n            }\n        }),\n        shareReplay({bufferSize: 1, refCount: true}),\n    );\n\n    protected readonly path$: Observable<string> = this.pathWithLabel$.pipe(\n        map(({path}) => path),\n    );\n\n    protected readonly labelPosition$: Observable<{x: number; y: number}> =\n        this.pathWithLabel$.pipe(map(({labelX, labelY}) => ({x: labelX, y: labelY})));\n\n    protected readonly optimization$: Observable<boolean> = this.path$.pipe(\n        skip(1),\n        switchMap(() => concat(of(true), of(false).pipe(delay(400)))),\n        startWith(false),\n        distinctUntilChanged(),\n    );\n\n    protected handleKeyboardEvent(event: KeyboardEvent): void {\n        if (!this.selected || !this.deletable) {\n            return;\n        }\n\n        event.preventDefault();\n\n        this.connectionsService.removeConnection(this.connection);\n        this.connectionDeleted.emit();\n    }\n\n    protected onSelectedChanged(selected: boolean): void {\n        this.selected = selected;\n\n        if (selected) {\n            this.connectionSelected.emit();\n        }\n    }\n\n    private getConnectionPoint(\n        connector: DfDataConnector,\n    ): BehaviorSubject<DfConnectorData> | BehaviorSubject<null> {\n        return this.coordinatesService.getConnectionPoint(createConnectorHash(connector));\n    }\n}\n","<svg class=\"connection\" [class.optimize-speed]=\"optimization$ | async\">\n    <!-- Marker start-->\n    <defs>\n        <marker\n            id=\"df-arrowhead-arrowClosed\"\n            [attr.viewBox]=\"arrowViewBox\"\n            refX=\"0\"\n            refY=\"0\"\n            [attr.markerWidth]=\"arrowMarkerWidth\"\n            [attr.markerHeight]=\"arrowMarkerHeight\"\n            orient=\"auto-start-reverse\"\n            markerUnits=\"strokeWidth\"\n        >\n            <polyline\n                [attr.points]=\"arrowClosedPoints\"\n                stroke-linecap=\"round\"\n                stroke-linejoin=\"round\"\n                fill=\"context-stroke\"\n                stroke=\"context-stroke\"\n            />\n        </marker>\n        <marker\n            id=\"df-arrowhead-arrow\"\n            [attr.viewBox]=\"arrowViewBox\"\n            refX=\"0\"\n            refY=\"0\"\n            [attr.markerWidth]=\"arrowMarkerWidth\"\n            [attr.markerHeight]=\"arrowMarkerHeight\"\n            orient=\"auto-start-reverse\"\n            markerUnits=\"strokeWidth\"\n        >\n            <polyline\n                [attr.points]=\"arrowPoints\"\n                stroke-linecap=\"round\"\n                stroke-linejoin=\"round\"\n                fill=\"none\"\n                stroke=\"context-stroke\"\n            />\n        </marker>\n    </defs>\n    <!-- Marker end-->\n\n    <!-- Connection line start-->\n    <path class=\"selectable-area\" [attr.d]=\"path$ | async\" (dfSelectableElement)=\"onSelectedChanged($event)\" />\n    <path class=\"main-path\" [attr.d]=\"path$ | async\" [class.df-selected]=\"selected\" [attr.marker-end]=\"markerEnd\" />\n    <!-- Connection line start-->\n\n    <!-- Label start -->\n    <foreignObject *ngIf=\"connection.label\" class=\"label-container\" width=\"100%\" height=\"100%\">\n        <div\n            xmlns=\"http://www.w3.org/1999/xhtml\"\n            class=\"label\"\n            [style.left.px]=\"(labelPosition$ | async)?.x\"\n            [style.top.px]=\"(labelPosition$ | async)?.y\"\n        >\n            <ng-container *polymorpheusOutlet=\"connection.label.content as label; context: connection.label.context\">\n                {{ label }}\n            </ng-container>\n        </div>\n    </foreignObject>\n    <!-- Label end -->\n</svg>\n","import {Injectable} from '@angular/core';\nimport {BehaviorSubject} from 'rxjs';\n\nimport type {DfDataConnection} from '../../ng-draw-flow.interfaces';\n\n@Injectable()\nexport class ConnectionsService {\n    public readonly connections$ = new BehaviorSubject<DfDataConnection[]>([]);\n    public readonly usedConnectors$ = new BehaviorSubject<string[]>([]);\n\n    public addConnections(connections: DfDataConnection[]): void {\n        const newConnections = connections.filter(\n            (newConnection) =>\n                !this.connections$.value.some((existingConnection) =>\n                    this.areConnectionsEqual(existingConnection, newConnection),\n                ),\n        );\n\n        if (newConnections.length === 0) {\n            return;\n        }\n\n        const updatedUsedConnectors = [...this.usedConnectors$.value];\n\n        newConnections.forEach((connection) => {\n            if (!updatedUsedConnectors.includes(connection.source.connectorId)) {\n                updatedUsedConnectors.push(connection.source.connectorId);\n            }\n\n            if (!updatedUsedConnectors.includes(connection.target.connectorId)) {\n                updatedUsedConnectors.push(connection.target.connectorId);\n            }\n        });\n\n        this.usedConnectors$.next(updatedUsedConnectors);\n        this.connections$.next([...this.connections$.value, ...newConnections]);\n    }\n\n    public removeConnection(connectionToRemove: DfDataConnection): void {\n        const filteredConnections = this.connections$.value.filter(\n            (existingConnection) =>\n                !this.areConnectionsEqual(existingConnection, connectionToRemove),\n        );\n\n        const usedConnectors = this.usedConnectors$.value.filter((connectorId: string) =>\n            filteredConnections.some(\n                (connection) =>\n                    connection.source.connectorId === connectorId ||\n                    connection.target.connectorId === connectorId,\n            ),\n        );\n\n        this.usedConnectors$.next(usedConnectors);\n        this.connections$.next(filteredConnections);\n    }\n\n    public removeConnectionsByNodeId(id: string): void {\n        const connectionsToKeep = this.connections$.value.filter(\n            (connection) =>\n                connection.source.nodeId !== id && connection.target.nodeId !== id,\n        );\n\n        const usedConnectors = this.usedConnectors$.value.filter((connectorId: string) =>\n            connectionsToKeep.some(\n                (connection) =>\n                    connection.source.connectorId === connectorId ||\n                    connection.target.connectorId === connectorId,\n            ),\n        );\n\n        this.usedConnectors$.next(usedConnectors);\n        this.connections$.next(connectionsToKeep);\n    }\n\n    public removeConnectionsByConnectorId(connectorIdToRemove: string): void {\n        if (!connectorIdToRemove) {\n            return;\n        }\n\n        const connectionsToKeep = this.connections$.value.filter(\n            (connection) =>\n                connection.source.connectorId !== connectorIdToRemove &&\n                connection.target.connectorId !== connectorIdToRemove,\n        );\n\n        const usedConnectors = this.usedConnectors$.value.filter(\n            (connectorId) => connectorId !== connectorIdToRemove,\n        );\n\n        this.usedConnectors$.next(usedConnectors);\n        this.connections$.next(connectionsToKeep);\n    }\n\n    private areConnectionsEqual(\n        connection1: DfDataConnection,\n        connection2: DfDataConnection,\n    ): boolean {\n        return (\n            connection1.source.nodeId === connection2.source.nodeId &&\n            connection1.source.connectorType === connection2.source.connectorType &&\n            connection1.source.connectorId === connection2.source.connectorId &&\n            connection1.target.nodeId === connection2.target.nodeId &&\n            connection1.target.connectorType === connection2.target.connectorType &&\n            connection1.target.connectorId === connection2.target.connectorId\n        );\n    }\n}\n","import type {ElementRef, Signal} from '@angular/core';\nimport {\n    ChangeDetectionStrategy,\n    Component,\n    computed,\n    inject,\n    Output,\n    ViewChild,\n} from '@angular/core';\n\nimport {DRAW_FLOW_OPTIONS} from '../../../ng-draw-flow.configs';\nimport type {DfConnectorData, DfOptions} from '../../../ng-draw-flow.interfaces';\nimport {DfConnectionType} from '../../../ng-draw-flow.interfaces';\nimport {createBezierPath, createSmoothStepPath} from '../utils';\nimport {DraftConnectionService} from './draft-connection.service';\n\n@Component({\n    standalone: true,\n    selector: 'df-draft-connection',\n    templateUrl: './draft-connection.component.svg',\n    styleUrls: ['../connection.component.less'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class DraftConnectionComponent {\n    private readonly draftConnectionService = inject(DraftConnectionService);\n    private readonly options: DfOptions = inject(DRAW_FLOW_OPTIONS);\n\n    @ViewChild('connectionPath')\n    protected connectionPath!: ElementRef;\n\n    @Output()\n    protected readonly connectionCreated = this.draftConnectionService.connectionCreated$;\n\n    protected pathData: Signal<string> = computed(() => {\n        const sourcePoint: DfConnectorData = this.draftConnectionService.source();\n        const targetPoint: DfConnectorData = this.draftConnectionService.target();\n        const curvature = this.options.connection.curvature;\n\n        switch (this.options.connection.type) {\n            case DfConnectionType.SmoothStep: {\n                const [path] = createSmoothStepPath(sourcePoint, targetPoint, curvature);\n\n                return path;\n            }\n            case DfConnectionType.Bezier:\n            default: {\n                const [path] = createBezierPath(sourcePoint, targetPoint, curvature);\n\n                return path;\n            }\n        }\n    });\n}\n","<svg class=\"connection draft-connection\">\n    <path #connectionPath class=\"main-path\" [attr.d]=\"pathData()\" />\n</svg>\n","import {DOCUMENT} from '@angular/common';\nimport type {OnDestroy, WritableSignal} from '@angular/core';\nimport {inject, Injectable, signal} from '@angular/core';\nimport {\n    animationFrameScheduler,\n    BehaviorSubject,\n    filter,\n    fromEvent,\n    map,\n    observeOn,\n    pairwise,\n    repeat,\n    Subject,\n    switchMap,\n    takeUntil,\n    tap,\n} from 'rxjs';\n\nimport {INITIAL_COORDINATES} from '../../../consts';\nimport {createConnectorHash, dfDistanceBetweenPoints} from '../../../helpers';\nimport {DRAW_FLOW_OPTIONS} from '../../../ng-draw-flow.configs';\nimport type {\n    DfConnectorData,\n    DfDataConnection,\n    DfDataConnector,\n    DfOptions,\n} from '../../../ng-draw-flow.interfaces';\nimport {DfConnectionPoint, DfConnectorPosition} from '../../../ng-draw-flow.interfaces';\nimport {CoordinatesService} from '../../../services/coordinates.service';\nimport {PanZoomService} from '../../pan-zoom/pan-zoom.service';\nimport {getConnectorDataset} from '../utils/get-coonector-dataset.util';\n\n@Injectable()\nexport class DraftConnectionService implements OnDestroy {\n    private readonly panZoomService = inject(PanZoomService);\n    private readonly coordinatesService = inject(CoordinatesService);\n    private readonly options = inject<DfOptions>(DRAW_FLOW_OPTIONS);\n    protected readonly destroy$ = new Subject<void>();\n    private sourceConnector!: DfDataConnector;\n\n    public source: WritableSignal<DfConnectorData> = signal<DfConnectorData>({\n        point: INITIAL_COORDINATES,\n        position: DfConnectorPosition.Right,\n    });\n\n    public target: WritableSignal<DfConnectorData> = signal<DfConnectorData>({\n        point: INITIAL_COORDINATES,\n        position: DfConnectorPosition.Left,\n    });\n\n    public readonly isConnectionCreating$ = new BehaviorSubject<boolean>(false);\n    public readonly connectionCreated$ = new Subject<DfDataConnection>();\n    public readonly connection$ = new Subject<DfDataConnector>();\n\n    constructor() {\n        this.connectionSubscription();\n    }\n\n    public ngOnDestroy(): void {\n        this.destroy$.next();\n        this.destroy$.complete();\n    }\n\n    private connectionSubscription(): void {\n        const document = inject(DOCUMENT);\n\n        this.connection$\n            .pipe(\n                filter(() => this.options.options.connectionsCreatable),\n                tap((connectorData) => this.onDragStart(connectorData)),\n                switchMap(() => fromEvent<PointerEvent>(document, 'pointermove')),\n                filter(() => this.isConnectionCreating$.value),\n                observeOn(animationFrameScheduler),\n                pairwise(),\n                map(([previousEvent, currentEvent]) =>\n                    this.onDragMove(previousEvent, currentEvent),\n                ),\n                // eslint-disable-next-line rxjs/no-unsafe-takeuntil\n                takeUntil(\n                    fromEvent<PointerEvent>(document, 'pointerup').pipe(\n                        filter(() => this.isConnectionCreating$.value),\n                        tap((event: PointerEvent) => this.onDragEnd(event)),\n                    ),\n                ),\n                // eslint-disable-next-line rxjs/no-unsafe-takeuntil\n                takeUntil(this.destroy$),\n                repeat(),\n            )\n            .subscribe();\n    }\n\n    private onDragStart(connector: DfDataConnector): void {\n        if (!this.options.options.connectionsCreatable) {\n            return;\n        }\n\n        this.sourceConnector = connector;\n        this.isConnectionCreating$.next(true);\n        const sourceId = createConnectorHash(connector);\n        const sourcePoint: DfConnectorData | null =\n            this.coordinatesService.getConnectionPoint(sourceId)?.value;\n\n        if (!sourcePoint) {\n            return;\n        }\n\n        this.source.set(sourcePoint);\n        this.target.set({\n            ...sourcePoint,\n            position: this.getTargetPosition(this.source().position),\n        });\n    }\n\n    private onDragMove(previousEvent: PointerEvent, currentEvent: PointerEvent): void {\n        const {deltaX, deltaY} = dfDistanceBetweenPoints(previousEvent, currentEvent);\n        const {zoom} = this.panZoomService.panzoomModel;\n        const target: DfConnectorData = this.target();\n\n        this.target.set({\n            position: target.position,\n            point: {\n                x: target.point.x + deltaX / zoom,\n                y: target.point.y + deltaY / zoom,\n            },\n        });\n    }\n\n    private getTargetPosition(\n        startPosition: DfConnectorPosition | null,\n    ): DfConnectorPosition | null {\n        switch (startPosition) {\n            case DfConnectorPosition.Bottom:\n                return DfConnectorPosition.Top;\n            case DfConnectorPosition.Left:\n                return DfConnectorPosition.Right;\n            case DfConnectorPosition.Right:\n                return DfConnectorPosition.Left;\n            case DfConnectorPosition.Top:\n                return DfConnectorPosition.Bottom;\n            default:\n                return null;\n        }\n    }\n\n    private onDragEnd(event: PointerEvent): void {\n        const target = event.target as HTMLElement | null;\n        const targetConnector = target ? getConnectorDataset(target) : null;\n\n        if (\n            targetConnector &&\n            targetConnector.connectorType === DfConnectionPoint.Input\n        ) {\n            this.connectionCreated$.next({\n                source: this.sourceConnector,\n                target: targetConnector,\n                label: this.sourceConnector.connectionLabel,\n            });\n        }\n\n        this.resetConnectors();\n        this.isConnectionCreating$.next(false);\n    }\n\n    private resetConnectors(): void {\n        this.source.set({\n            point: INITIAL_COORDINATES,\n            position: DfConnectorPosition.Right,\n        });\n        this.target.set({\n            point: INITIAL_COORDINATES,\n            position: null,\n        });\n    }\n}\n","import type {DfPoint} from '../../../ng-draw-flow.interfaces';\n\nexport const calculateDistance = (source: DfPoint, target: DfPoint): number =>\n    Math.hypot(target.x - source.x, target.y - source.y);\n","import type {DfConnectorData} from '../../../../../ng-draw-flow.interfaces';\nimport {getBezierEdgeCenter, getControlWithCurvature} from './helpers';\n\nexport function createBezierPath(\n    startConnector: DfConnectorData,\n    endConnector: DfConnectorData,\n    curvature = 0.25,\n): [path: string, labelX: number, labelY: number, offsetX: number, offsetY: number] {\n    const sourceControlPoint = getControlWithCurvature(\n        startConnector,\n        endConnector.point,\n        curvature,\n    );\n    const targetControlPoint = getControlWithCurvature(\n        endConnector,\n        startConnector.point,\n        curvature,\n    );\n    const [labelX, labelY, offsetX, offsetY] = getBezierEdgeCenter({\n        source: startConnector.point,\n        target: endConnector.point,\n        sourceControlPoint,\n        targetControlPoint,\n    });\n\n    return [\n        `M${startConnector.point.x},${startConnector.point.y} C${sourceControlPoint.x},${sourceControlPoint.y} ${targetControlPoint.x},${targetControlPoint.y} ${endConnector.point.x},${endConnector.point.y}`,\n        labelX,\n        labelY,\n        offsetX,\n        offsetY,\n    ];\n}\n","import type {DfPoint} from '../../../../../../ng-draw-flow.interfaces';\n\nexport function getBezierEdgeCenter({\n    source,\n    target,\n    sourceControlPoint,\n    targetControlPoint,\n}: {\n    source: DfPoint;\n    target: DfPoint;\n    sourceControlPoint: DfPoint;\n    targetControlPoint: DfPoint;\n}): [number, number, number, number] {\n    const centerX =\n        source.x * 0.125 +\n        sourceControlPoint.x * 0.375 +\n        targetControlPoint.x * 0.375 +\n        target.x * 0.125;\n    const centerY =\n        source.y * 0.125 +\n        sourceControlPoint.y * 0.375 +\n        targetControlPoint.y * 0.375 +\n        target.y * 0.125;\n    const offsetX = Math.abs(centerX - source.x);\n    const offsetY = Math.abs(centerY - source.y);\n\n    return [centerX, centerY, offsetX, offsetY];\n}\n","export function calculateControlOffset(distance: number, curvature: number): number {\n    if (distance >= 0) {\n        return 0.5 * distance;\n    }\n\n    return curvature * 25 * Math.sqrt(-distance);\n}\n","import type {DfConnectorData, DfPoint} from '../../../../../../ng-draw-flow.interfaces';\nimport {DfConnectorPosition} from '../../../../../../ng-draw-flow.interfaces';\nimport {point} from '../../../point';\nimport {calculateControlOffset} from './control-offset';\n\nexport function getControlWithCurvature(\n    sourceConnector: DfConnectorData,\n    target: DfPoint,\n    curvature: number,\n): DfPoint {\n    switch (sourceConnector.position!) {\n        case DfConnectorPosition.Bottom:\n            return point(\n                sourceConnector.point.x,\n                sourceConnector.point.y +\n                    calculateControlOffset(target.y - sourceConnector.point.y, curvature),\n            );\n        case DfConnectorPosition.Left:\n            return point(\n                sourceConnector.point.x -\n                    calculateControlOffset(sourceConnector.point.x - target.x, curvature),\n                sourceConnector.point.y,\n            );\n        case DfConnectorPosition.Right:\n            return point(\n                sourceConnector.point.x +\n                    calculateControlOffset(target.x - sourceConnector.point.x, curvature),\n                sourceConnector.point.y,\n            );\n        case DfConnectorPosition.Top:\n            return point(\n                sourceConnector.point.x,\n                sourceConnector.point.y -\n                    calculateControlOffset(sourceConnector.point.y - target.y, curvature),\n            );\n    }\n}\n","export * from './bezier-edge-center';\nexport * from './control-offset';\nexport * from './control-with-curvature';\n","export * from './bezier';\n","import type {DfPoint} from '../../../../../../ng-draw-flow.interfaces';\nimport {DfConnectorPosition} from '../../../../../../ng-draw-flow.interfaces';\n\n/**\n * Returns a unit vector (±1 on one axis, 0 on the other)\n * representing the first axial step of the edge immediately\n * after it leaves the source connector.\n *\n * ─ If the connector is **Left** or **Right**, movement is along **X**.\n * ─ Otherwise (Top / Bottom), movement is along **Y**.\n *\n * @param source      coordinates of the source connector\n * @param sourcePos   side of the source node (Left | Right | Top | Bottom)\n * @param target      coordinates of the target connector (used for direction)\n */\nexport function getPrimaryDirection(\n    source: DfPoint,\n    sourcePos: DfConnectorPosition,\n    target: DfPoint,\n): DfPoint {\n    // Horizontal connectors → move along X\n    if (\n        sourcePos === DfConnectorPosition.Left ||\n        sourcePos === DfConnectorPosition.Right\n    ) {\n        return source.x < target.x ? {x: 1, y: 0} : {x: -1, y: 0};\n    }\n\n    // Vertical connectors → move along Y\n    return source.y < target.y ? {x: 0, y: 1} : {x: 0, y: -1};\n}\n","import type {DfPoint} from '../../../../../../ng-draw-flow.interfaces';\n\n/**\n * Computes the geometric center between two endpoints **and**\n * returns the half-length (offset) on each axis.\n *\n * Tuple structure:\n *   [centerX, centerY, offsetX, offsetY]\n *\n * These values are later used for label placement and\n * “long-edge” detection in the renderer.\n */\nexport function getSmoothStepEdgeCenter({\n    source,\n    target,\n}: {\n    source: DfPoint;\n    target: DfPoint;\n}): [number, number, number, number] {\n    // Half of the absolute distance on each axis (always positive)\n    const offsetX = Math.abs(source.x - target.x) / 2;\n    const offsetY = Math.abs(source.y - target.y) / 2;\n\n    // Add the offset to the smaller coordinate on each axis\n    const centerX = target.x < source.x ? target.x + offsetX : source.x + offsetX;\n    const centerY = target.y < source.y ? target.y + offsetY : source.y + offsetY;\n\n    return [centerX, centerY, offsetX, offsetY];\n}\n","export * from './smooth-step';\n","import type {DfPoint} from '../../../../../../ng-draw-flow.interfaces';\nimport {calculateDistance} from '../../../calculate-distance.util';\n\n/**\n * Builds an SVG path segment describing a rounded bend that smoothly joins\n * the straight legs coming **into** and **out of** the waypoint **cornerPoint**.\n *\n * @param startPoint  point before the bend\n * @param cornerPoint the actual “corner” point\n * @param endPoint    point after the bend\n * @param maxRadius   upper bound for the smoothing radius\n */\n// eslint-disable-next-line @typescript-eslint/max-params\nexport function bend(\n    startPoint: DfPoint,\n    cornerPoint: DfPoint,\n    endPoint: DfPoint,\n    maxRadius: number,\n): string {\n    // Choose the largest radius that “fits” both legs and does not exceed maxRadius\n    const bendRadius = Math.min(\n        calculateDistance(startPoint, cornerPoint) / 2,\n        calculateDistance(cornerPoint, endPoint) / 2,\n        maxRadius,\n    );\n\n    // If all three points lie on the same straight line, no rounding is needed\n    const isColinear =\n        (startPoint.x === cornerPoint.x && cornerPoint.x === endPoint.x) ||\n        (startPoint.y === cornerPoint.y && cornerPoint.y === endPoint.y);\n\n    if (isColinear) {\n        return `L${cornerPoint.x} ${cornerPoint.y}`; // simple straight-line segment\n    }\n\n    // Determine whether we are entering the corner horizontally */\n    const enteringHorizontally = startPoint.y === cornerPoint.y;\n\n    // horizontal → vertical turn\n    if (enteringHorizontally) {\n        const xDir = startPoint.x < endPoint.x ? -1 : 1; // step “back” along X\n        const yDir = startPoint.y < endPoint.y ? 1 : -1; // and “forward” along Y\n\n        return (\n            `L ${cornerPoint.x + bendRadius * xDir},${cornerPoint.y}` + // straight segment\n            `Q ${cornerPoint.x},${cornerPoint.y} ${cornerPoint.x},${cornerPoint.y + bendRadius * yDir}` // quarter-circle\n        );\n    }\n\n    // vertical → horizontal turn\n    const xDir = startPoint.x < endPoint.x ? 1 : -1; // “forward” along X\n    const yDir = startPoint.y < endPoint.y ? -1 : 1; // step “back” along Y\n\n    return (\n        `L ${cornerPoint.x},${cornerPoint.y + bendRadius * yDir}` + // straight segment\n        `Q ${cornerPoint.x},${cornerPoint.y} ${cornerPoint.x + bendRadius * xDir},${cornerPoint.y}` // quarter-circle\n    );\n}\n","import type {\n    DfConnectorPosition,\n    DfPoint,\n} from '../../../../../../ng-draw-flow.interfaces';\nimport {getPrimaryDirection} from '../helpers/get-primary-direction';\nimport {getSmoothStepEdgeCenter} from '../helpers/smooth-step-edge-center';\nimport {CONNECTOR_DIRECTIONS, MIN_SEGMENT_LENGTH} from '../smooth-step.consts';\n\ninterface ComputePointsParams {\n    source: DfPoint;\n    sourcePos: DfConnectorPosition;\n    target: DfPoint;\n    targetPos: DfConnectorPosition;\n    offset?: number;\n    centerOverride?: Partial<DfPoint>;\n}\n\n/**\n * Returns all points that form the polyline **before** the bezier smoothing is\n * applied. Additionally returns the center of the longest straight segment –\n * handy for label placement.\n */\nexport function computeWaypoints(\n    pointsParams: ComputePointsParams,\n): [DfPoint[], number, number] {\n    /**\n     * Unpack input, apply fall-backs\n     */\n    const {\n        source,\n        sourcePos,\n        target,\n        targetPos,\n        offset = MIN_SEGMENT_LENGTH,\n        centerOverride = {},\n    } = pointsParams;\n\n    /**\n     * Compute the unit directions for each connector\n     */\n    const sourceDir = CONNECTOR_DIRECTIONS[sourcePos];\n    const targetDir = CONNECTOR_DIRECTIONS[targetPos];\n\n    /**\n     * Create “gap points” that leave a small offset straight out\n     * of each connector so the edge never starts/ends inside a node\n     */\n    const sourceGap: DfPoint = {\n        x: source.x + sourceDir.x * offset,\n        y: source.y + sourceDir.y * offset,\n    };\n    const targetGap: DfPoint = {\n        x: target.x + targetDir.x * offset,\n        y: target.y + targetDir.y * offset,\n    };\n\n    /**\n     * Decide whether the first long segment should run horizontally\n     * or vertically.  This is the “primary axis” chosen so that we\n     * head *towards* the target rather than backwards.\n     */\n    const firstStep = getPrimaryDirection(sourceGap, sourcePos, targetGap);\n    const primaryAxis: 'x' | 'y' = firstStep.x !== 0 ? 'x' : 'y';\n    const axisSign = firstStep[primaryAxis]; //  +1 or -1\n\n    /**\n     * Fallback geometric center used for label placement\n     */\n    const [fallbackCX, fallbackCY] = getSmoothStepEdgeCenter({source, target});\n    let labelCenterX = centerOverride.x ?? fallbackCX;\n    let labelCenterY = centerOverride.y ?? fallbackCY;\n\n    /**\n     * Build the elbow(s) — the intermediate waypoints\n     */\n    let elbows: DfPoint[] = [];\n    const sourceOpposesTarget = sourceDir[primaryAxis] * targetDir[primaryAxis] === -1; // true for Left→Right, Top→Bottom\n\n    // Case A ─ Opposite sides\n    if (sourceOpposesTarget) {\n        const verticalSplit: DfPoint[] = [\n            {x: labelCenterX, y: sourceGap.y},\n            {x: labelCenterX, y: targetGap.y},\n        ];\n        const horizontalSplit: DfPoint[] = [\n            {x: sourceGap.x, y: labelCenterY},\n            {x: targetGap.x, y: labelCenterY},\n        ];\n\n        const keepDirection = sourceDir[primaryAxis] === axisSign;\n\n        if (primaryAxis === 'x') {\n            elbows = keepDirection ? verticalSplit : horizontalSplit;\n        } else {\n            elbows = keepDirection ? horizontalSplit : verticalSplit;\n        }\n    }\n    // Case B ─ Same / mixed\n    else {\n        const sourceToTarget = [{x: sourceGap.x, y: targetGap.y}];\n        const targetToSource = [{x: targetGap.x, y: sourceGap.y}];\n\n        if (primaryAxis === 'x') {\n            elbows = sourceDir.x === axisSign ? targetToSource : sourceToTarget;\n        } else {\n            elbows = sourceDir.y === axisSign ? sourceToTarget : targetToSource;\n        }\n\n        /** Detect & flip elbow to avoid overlap with the nodes */\n        if (sourcePos !== targetPos) {\n            const crossAxis: 'x' | 'y' = primaryAxis === 'x' ? 'y' : 'x';\n            const sameCardinal = sourceDir[primaryAxis] === targetDir[crossAxis];\n\n            const mustFlip =\n                (sourceDir[primaryAxis] === 1 &&\n                    ((!sameCardinal && sourceGap[crossAxis] > targetGap[crossAxis]) ||\n                        (sameCardinal &&\n                            sourceGap[crossAxis] <= targetGap[crossAxis]))) ||\n                (sourceDir[primaryAxis] === -1 &&\n                    ((!sameCardinal && sourceGap[crossAxis] < targetGap[crossAxis]) ||\n                        (sameCardinal && sourceGap[crossAxis] >= targetGap[crossAxis])));\n\n            if (mustFlip) {\n                elbows = primaryAxis === 'x' ? sourceToTarget : targetToSource;\n            }\n        }\n\n        /** Re-compute label center so it sits on the longest straight leg */\n        const longestX = Math.max(\n            Math.abs(sourceGap.x - elbows[0]!.x),\n            Math.abs(targetGap.x - elbows[0]!.x),\n        );\n        const longestY = Math.max(\n            Math.abs(sourceGap.y - elbows[0]!.y),\n            Math.abs(targetGap.y - elbows[0]!.y),\n        );\n\n        if (longestX >= longestY) {\n            labelCenterX = (sourceGap.x + targetGap.x) / 2;\n            labelCenterY = elbows[0]!.y;\n        } else {\n            labelCenterX = elbows[0]!.x;\n            labelCenterY = (sourceGap.y + targetGap.y) / 2;\n        }\n    }\n\n    /**\n     * Assemble the full polyline: connector-center ➜ gap ➜ elbows\n     */\n    const polyline: DfPoint[] = [\n        source, // 0. start at connector center\n        sourceGap, // 1. leave the node\n        ...elbows, // 2. one or two elbows\n        targetGap, // 3. enter the target node\n        target, // 4. finish at connector center\n    ];\n\n    /**\n     * Return: [polyline points, labelCenterX, labelCenterY]\n     */\n    return [polyline, labelCenterX, labelCenterY];\n}\n","import type {DfPoint} from '../../../../../ng-draw-flow.interfaces';\nimport {DfConnectorPosition} from '../../../../../ng-draw-flow.interfaces';\n\n/**\n * Minimum length (in px) of the first straight segment that leaves a connector.\n */\nexport const MIN_SEGMENT_LENGTH = 20;\n\n/**\n * Unit vectors that describe where a connection should leave a connector\n * depending on its declared position.\n */\nexport const CONNECTOR_DIRECTIONS: Record<DfConnectorPosition, DfPoint> = {\n    [DfConnectorPosition.Left]: {x: -1, y: 0},\n    [DfConnectorPosition.Right]: {x: 1, y: 0},\n    [DfConnectorPosition.Top]: {x: 0, y: -1},\n    [DfConnectorPosition.Bottom]: {x: 0, y: 1},\n};\n","import type {DfConnectorData, DfPoint} from '../../../../../ng-draw-flow.interfaces';\nimport {DfConnectorPosition} from '../../../../../ng-draw-flow.interfaces';\nimport {bend} from './path-parts/bend';\nimport {computeWaypoints} from './path-parts/waypoints';\n\n/**\n * Draws a smooth-step SVG path between two connectors.\n *\n * @param startConnector   Data for the start connector.\n * @param endConnector     Data for the end connector.\n * @param radius           Radius of each bend (in pixels).\n * @returns                A tuple with an SVG `d` attribute and label coordinates.\n */\nexport function createSmoothStepPath(\n    startConnector: DfConnectorData,\n    endConnector: DfConnectorData,\n    radius = 5,\n): [path: string, labelX: number, labelY: number] {\n    // Default to Bottom/Top when the position is null (e.g. while a draft edge is dragged).\n    const sourcePos = startConnector.position ?? DfConnectorPosition.Bottom;\n    const targetPos = endConnector.position ?? DfConnectorPosition.Top;\n\n    const [polyline, labelX, labelY] = computeWaypoints({\n        source: startConnector.point,\n        sourcePos,\n        target: endConnector.point,\n        targetPos,\n    });\n\n    /** Convert the polyline to an SVG path (M, L, Q commands). */\n    const path = polyline.reduce<string>(\n        // eslint-disable-next-line @typescript-eslint/max-params\n        (computedPath: string, point: DfPoint, pathStepIndex: number, arr: DfPoint[]) => {\n            /* a) First point — use `M` (move-to). */\n            if (pathStepIndex === 0) {\n                return `M${point.x} ${point.y}`;\n            }\n\n            /* b) Last point — straight segment `L`. */\n            if (pathStepIndex === arr.length - 1) {\n                return `${computedPath}L${point.x} ${point.y}`;\n            }\n\n            /* c) Intermediate waypoint — insert a rounded bend (`L` + `Q`). */\n            return `${computedPath}${bend(arr[pathStepIndex - 1]!, point, arr[pathStepIndex + 1]!, radius)}`;\n        },\n        '',\n    );\n\n    return [path, labelX, labelY]; // ready-made `d` attribute for <path>\n}\n","import {isConnectorType} from '../../../helpers';\nimport type {DfDataConnector} from '../../../ng-draw-flow.interfaces';\n\nexport function getConnectorDataset(element: HTMLElement): DfDataConnector | null {\n    const {nodeId, connectorId, connectorType, position} = element.dataset;\n    const isValidConnector =\n        nodeId && connectorId && connectorType && isConnectorType(connectorType);\n\n    return isValidConnector\n        ? {\n              nodeId,\n              connectorId,\n              connectorType,\n              position,\n          }\n        : null;\n}\n","export * from './calculate-distance.util';\nexport * from './connection-paths/bezier';\nexport * from './connection-paths/smooth-step';\nexport * from './point';\n","import type {DfPoint} from '../../../ng-draw-flow.interfaces';\n\nexport const point = (x: number, y: number): DfPoint => ({x, y});\n","import {DestroyRef, Directive, ElementRef, HostBinding, inject} from '@angular/core';\nimport {takeUntilDestroyed} from '@angular/core/rxjs-interop';\nimport {filter} from 'rxjs';\n\nimport type {\n    DfConnectionPoint,\n    DfConnectorPosition,\n    DfDataConnectorConfig,\n    DfPoint,\n} from '../../ng-draw-flow.interfaces';\nimport {ConnectionsService} from '../connections/connections.service';\n\n@Directive()\nexport abstract class BaseConnector {\n    protected abstract data: DfDataConnectorConfig;\n    protected readonly destroyRef = inject(DestroyRef);\n    protected isDisabled = false;\n    public coordinates?: DfPoint;\n    public position?: DfConnectorPosition;\n\n    @HostBinding('attr.data-node-id')\n    public get bindNodeId(): string {\n        return this.data?.nodeId;\n    }\n\n    @HostBinding('attr.data-connector-id')\n    public get bindConnectorId(): string {\n        return this.data?.connectorId;\n    }\n\n    @HostBinding('attr.data-position')\n    public get bindPosition(): DfConnectorPosition | undefined {\n        return this.position;\n    }\n\n    @HostBinding('attr.data-connector-type')\n    protected connectorType!: DfConnectionPoint;\n\n    public readonly nativeElement = inject(ElementRef).nativeElement;\n    protected readonly connectionsService = inject(ConnectionsService);\n\n    protected readonly sub = this.connectionsService.usedConnectors$\n        .pipe(\n            filter(() => !!this.data?.connectorId),\n            takeUntilDestroyed(),\n        )\n        .subscribe((usedConnectorIds: string[]) => {\n            this.setupDisabledState(usedConnectorIds.includes(this.data.connectorId));\n        });\n\n    protected setupDisabledState(connected: boolean): void {\n        if (connected) {\n            this.nativeElement.setAttribute('data-connected', 'true');\n        } else {\n            this.nativeElement.removeAttribute('data-connected');\n        }\n\n        this.isDisabled = this.data.single && connected;\n\n        this.nativeElement.classList.toggle('df-disabled', this.isDisabled);\n    }\n\n    public destroy(): void {\n        this.connectionsService.removeConnectionsByConnectorId(this.data.connectorId);\n    }\n}\n","export * from './input.component';\nexport * from './output.component';\n","import {ChangeDetectionStrategy, Component, Input} from '@angular/core';\n\nimport type {DfDataConnectorConfig} from '../../ng-draw-flow.interfaces';\nimport {DfConnectionPoint, DfConnectorPosition} from '../../ng-draw-flow.interfaces';\nimport {BaseConnector} from './base-connector';\n\n@Component({\n    standalone: true,\n    selector: 'df-input',\n    template: '',\n    styleUrls: ['./connector.style.less'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class DfInputComponent extends BaseConnector {\n    protected override connectorType = DfConnectionPoint.Input;\n\n    @Input('connectorData')\n    public data!: DfDataConnectorConfig;\n\n    @Input()\n    public override position = DfConnectorPosition.Left;\n}\n","import {ChangeDetectionStrategy, Component, inject, Input} from '@angular/core';\n\nimport {DRAW_FLOW_OPTIONS} from '../../ng-draw-flow.configs';\nimport type {\n    DfConnectionLabel,\n    DfDataConnectorConfig,\n    DfOptions,\n} from '../../ng-draw-flow.interfaces';\nimport {DfConnectionPoint, DfConnectorPosition} from '../../ng-draw-flow.interfaces';\nimport {DraftConnectionService} from '../connections/draft-connection/draft-connection.service';\nimport {BaseConnector} from './base-connector';\n\n@Component({\n    standalone: true,\n    selector: 'df-output',\n    template: '',\n    styleUrls: ['./connector.style.less'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    host: {\n        '(pointerdown.stop)': 'this.onDragStart($event)',\n    },\n})\nexport class DfOutputComponent extends BaseConnector {\n    protected override connectorType = DfConnectionPoint.Output;\n    private readonly draftConnectionService = inject(DraftConnectionService);\n    private readonly options = inject<DfOptions>(DRAW_FLOW_OPTIONS);\n\n    @Input('connectorData')\n    public data!: DfDataConnectorConfig;\n\n    @Input()\n    public override position = DfConnectorPosition.Right;\n\n    @Input()\n    public connectionLabel?: DfConnectionLabel;\n\n    protected onDragStart(_event: PointerEvent): void {\n        const {nodeId, connectorId} = this.data;\n\n        if (\n            !nodeId ||\n            !connectorId ||\n            this.isDisabled ||\n            !this.options.options.connectionsCreatable\n        ) {\n            return;\n        }\n\n        this.draftConnectionService.connection$.next({\n            nodeId,\n            connectorId,\n            connectorType: DfConnectionPoint.Output,\n            position: this.position,\n            connectionLabel: this.connectionLabel,\n        });\n    }\n}\n","import type {\n    AfterViewInit,\n    ComponentRef,\n    ElementRef,\n    OnChanges,\n    QueryList,\n    SimpleChanges,\n} from '@angular/core';\nimport {\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    DestroyRef,\n    EventEmitter,\n    inject,\n    Input,\n    Output,\n    ViewChild,\n    ViewContainerRef,\n} from '@angular/core';\nimport {takeUntilDestroyed} from '@angular/core/rxjs-interop';\nimport type {Observable} from 'rxjs';\nimport {merge, tap} from 'rxjs';\n\nimport {INITIAL_COORDINATES} from '../../consts';\nimport type {DfDragDrop, DfDragDropDistance} from '../../directives';\nimport {\n    DfDragDropStage,\n    DragDropDirective,\n    SelectableElementDirective,\n} from '../../directives';\nimport {createConnectorHash} from '../../helpers';\nimport {DRAW_FLOW_OPTIONS} from '../../ng-draw-flow.configs';\nimport type {\n    DfDataInitialNode,\n    DfDataNode,\n    DfOptions,\n    DfPoint,\n} from '../../ng-draw-flow.interfaces';\nimport {DfConnectionPoint} from '../../ng-draw-flow.interfaces';\nimport {DRAW_FLOW_ROOT_ELEMENT} from '../../ng-draw-flow.token';\nimport type {DrawFlowBaseNode} from '../../ng-draw-flow-node.base';\nimport {CoordinatesService} from '../../services/coordinates.service';\nimport type {DfInputComponent, DfOutputComponent} from '../connectors';\nimport {DF_PAN_ZOOM_OPTIONS} from '../pan-zoom/pan-zoom.options';\nimport {PanZoomService} from '../pan-zoom/pan-zoom.service';\n\n@Component({\n    standalone: true,\n    selector: 'df-node',\n    imports: [DragDropDirective, SelectableElementDirective],\n    templateUrl: './node.component.html',\n    styleUrls: ['./node.component.less'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    host: {\n        '(document:keydown.delete)': 'this.handleKeyboardEvent($event)',\n        '(document:keydown.backspace)': 'this.handleKeyboardEvent($event)',\n    },\n})\nexport class NodeComponent implements AfterViewInit, OnChanges {\n    private readonly cdr = inject(ChangeDetectorRef);\n    private readonly destroyRef = inject(DestroyRef);\n    private readonly panZoomService = inject(PanZoomService);\n    private readonly coordinatesService = inject(CoordinatesService);\n    private readonly drawFlowOptions = inject<DfOptions>(DRAW_FLOW_OPTIONS);\n    private readonly drawFlowComponents = this.drawFlowOptions.nodes;\n    private readonly nodeDragThreshold = this.drawFlowOptions.options.nodeDragThreshold;\n    private readonly draggable = this.drawFlowOptions.options.nodesDraggable;\n    private readonly deletable = this.drawFlowOptions.options.nodesDeletable;\n\n    private readonly drawFlowElement = inject<HTMLElement>(DRAW_FLOW_ROOT_ELEMENT);\n    private readonly panZoomOptions = inject(DF_PAN_ZOOM_OPTIONS);\n\n    private innerComponent!: DrawFlowBaseNode;\n    private nodeContentComponentRef!: ComponentRef<DrawFlowBaseNode>;\n    private nodeWidth!: number;\n    private nodeHeight!: number;\n    private selected = false;\n    private value!: DfDataNode;\n    private accumulatedDelta: DfPoint = INITIAL_COORDINATES;\n    private previousInputs: DfInputComponent[] = [];\n    private previousOutputs: DfOutputComponent[] = [];\n\n    @ViewChild('nodeElement')\n    private readonly nodeElementRef!: ElementRef<HTMLElement>;\n\n    @ViewChild('container', {read: ViewContainerRef})\n    private readonly containerRef!: ViewContainerRef;\n\n    @Input()\n    public node!: DfDataInitialNode | DfDataNode;\n\n    @Input()\n    public invalid = false;\n\n    @Output()\n    protected readonly nodeMoved = new EventEmitter<DfDataNode>();\n\n    @Output()\n    protected readonly nodeDeleted = new EventEmitter<void>();\n\n    @Output()\n    protected readonly nodeSelected = new EventEmitter<DfDataNode>();\n\n    @Output()\n    protected readonly connectorDeleted = new EventEmitter<string>();\n\n    protected cursor: 'grabbing' | 'initial' = 'initial';\n\n    protected handleKeyboardEvent(event: KeyboardEvent): void {\n        if (this.selected && this.deletable && !this.node.startNode) {\n            event.preventDefault();\n\n            this.nodeDeleted.emit();\n        }\n    }\n\n    public ngOnChanges(changes: SimpleChanges): void {\n        if (changes.invalid && this.innerComponent) {\n            this.innerComponent.invalid = changes.invalid.currentValue;\n            this.innerComponent.markForCheck();\n        }\n    }\n\n    public ngAfterViewInit(): void {\n        this.fillValue();\n        this.createNodeContentComponent(this.node);\n        this.subscribeToConnectorsChanges();\n        this.saveInnerNodeSize();\n        this.setInitialPosition();\n        this.updateConnectorsCoordinates();\n\n        if (this.invalid) {\n            this.innerComponent.invalid = true;\n            this.innerComponent.markForCheck();\n        }\n    }\n\n    protected createNodeContentComponent(node: DfDataInitialNode | DfDataNode): void {\n        const {id: nodeId, startNode, endNode, data} = node;\n        const nodeType = data.type;\n\n        this.containerRef.clear();\n        this.nodeContentComponentRef = this.containerRef.createComponent(\n            this.drawFlowComponents[nodeType]!,\n        );\n\n        this.innerComponent = this.nodeContentComponentRef.instance;\n\n        this.innerComponent.nodeId = nodeId;\n        this.innerComponent.startNode = startNode;\n        this.innerComponent.endNode = endNode;\n        this.innerComponent.model = data;\n\n        this.cdr.detectChanges();\n\n        this.applyOutputsConnectionLabel();\n    }\n\n    protected onSelectedChanged(selected: boolean): void {\n        this.selected = selected;\n        this.innerComponent.selected = selected;\n\n        if (selected) {\n            this.nodeSelected.emit(this.value);\n        }\n    }\n\n    protected onDrag(event: DfDragDrop): void {\n        if (this.node.startNode || !this.draggable) {\n            return;\n        }\n\n        if (event.stage === DfDragDropStage.Move) {\n            this.onDragMove(event.distance);\n        } else {\n            this.onDragEnd();\n        }\n    }\n\n    private onDragMove(distance: DfDragDropDistance): void {\n        const {zoom} = this.panZoomService.panzoomModel;\n\n        this.cursor = 'grabbing';\n\n        // Accumulate offset\n        this.accumulatedDelta.x += distance.deltaX / zoom;\n        this.accumulatedDelta.y += distance.deltaY / zoom;\n\n        const applyX = Math.abs(this.accumulatedDelta.x) >= this.nodeDragThreshold;\n        const applyY = Math.abs(this.accumulatedDelta.y) >= this.nodeDragThreshold;\n\n        if (applyX || applyY) {\n            // Apply accumulated offset\n            this.value.position.x += applyX ? this.accumulatedDelta.x : 0;\n            this.value.position.y += applyY ? this.accumulatedDelta.y : 0;\n\n            const centeredPosition = this.getCenteredPosition();\n\n            this.applyPositionToStyle(centeredPosition, true);\n            this.recalculateConnectorsPosition({\n                deltaX: applyX ? this.accumulatedDelta.x * zoom : 0,\n                deltaY: applyY ? this.accumulatedDelta.y * zoom : 0,\n            });\n\n            // Reset only used directions\n            if (applyX) {\n                this.accumulatedDelta.x = 0;\n            }\n\n            if (applyY) {\n                this.accumulatedDelta.y = 0;\n            }\n        }\n\n        this.panZoomService.panzoomDisabled = true;\n    }\n\n    private onDragEnd(): void {\n        this.cursor = 'initial';\n        this.panZoomService.panzoomDisabled = false;\n        this.nodeMoved.emit(this.value);\n        this.applyPositionToStyle(this.getCenteredPosition(), false);\n\n        this.accumulatedDelta = INITIAL_COORDINATES;\n    }\n\n    private fillValue(): void {\n        if (!('position' in this.node)) {\n            this.value = {\n                ...this.node,\n                position: this.getCenterOfViewport(),\n            };\n        } else {\n            this.value = this.node;\n        }\n    }\n\n    private saveInnerNodeSize(): void {\n        const nativeElement = this.nodeContentComponentRef.location.nativeElement;\n\n        this.nodeWidth = nativeElement.offsetWidth;\n        this.nodeHeight = nativeElement.offsetHeight;\n    }\n\n    private updateConnectorsCoordinates(): void {\n        const centeredCoordinates = this.getCenteredPosition();\n\n        this.innerComponent.inputs?.forEach((input: DfInputComponent) => {\n            this.updateConnectorCoordinates(\n                centeredCoordinates,\n                this.value.id,\n                input,\n                DfConnectionPoint.Input,\n            );\n        });\n\n        this.innerComponent.outputs?.forEach((output: DfOutputComponent) => {\n            this.updateConnectorCoordinates(\n                centeredCoordinates,\n                this.value.id,\n                output,\n                DfConnectionPoint.Output,\n            );\n        });\n    }\n\n    private recalculateConnectorsPosition(distance: DfDragDropDistance): void {\n        const {zoom} = this.panZoomService.panzoomModel;\n        const currentMoveDistance = {\n            deltaX: distance.deltaX / zoom,\n            deltaY: distance.deltaY / zoom,\n        };\n\n        this.innerComponent.inputs?.forEach((input: DfInputComponent) => {\n            this.recalculateConnectorPositionFromLast(\n                currentMoveDistance,\n                input,\n                DfConnectionPoint.Input,\n            );\n        });\n\n        this.innerComponent.outputs?.forEach((output: DfOutputComponent) => {\n            this.recalculateConnectorPositionFromLast(\n                currentMoveDistance,\n                output,\n                DfConnectionPoint.Output,\n            );\n        });\n    }\n\n    private recalculateConnectorPositionFromLast(\n        distance: DfDragDropDistance,\n        connector: DfInputComponent | DfOutputComponent,\n        connectorType: DfConnectionPoint,\n    ): void {\n        const newConnectorPosition = {\n            x: (connector.coordinates?.x ?? 0) + distance.deltaX,\n            y: (connector.coordinates?.y ?? 0) + distance.deltaY,\n        };\n\n        const connectorData = createConnectorHash({\n            nodeId: connector.data.nodeId,\n            connectorType,\n            connectorId: connector.data.connectorId,\n        });\n\n        connector.coordinates = newConnectorPosition;\n\n        this.coordinatesService.addConnectionPoint(\n            connectorData,\n            newConnectorPosition,\n            connector.position,\n        );\n    }\n\n    /* eslint-disable @typescript-eslint/max-params */\n    private updateConnectorCoordinates(\n        position: DfPoint,\n        nodeId: string,\n        connector: DfInputComponent | DfOutputComponent,\n        connectorType: DfConnectionPoint,\n    ): void {\n        const calculatedConnectorPosition = this.calculateConnectorPosition(\n            connector.nativeElement,\n            position,\n        );\n\n        connector.coordinates = calculatedConnectorPosition;\n\n        const connectorData = createConnectorHash({\n            nodeId,\n            connectorType,\n            connectorId: connector.nativeElement.dataset.connectorId,\n        });\n\n        this.coordinatesService.addConnectionPoint(\n            connectorData,\n            calculatedConnectorPosition,\n            connector.position,\n        );\n    }\n    /* eslint-enable @typescript-eslint/max-params */\n\n    private calculateConnectorPosition(\n        element: HTMLElement,\n        nodePosition: DfPoint,\n    ): DfPoint {\n        let x = nodePosition.x + element.offsetLeft + element.clientWidth / 2;\n        let y = nodePosition.y + element.offsetTop + element.clientHeight / 2;\n\n        while (element && !element.hasAttribute('data-draw-flow-node')) {\n            element = element.offsetParent as HTMLElement;\n\n            if (element) {\n                x += element.offsetLeft;\n                y += element.offsetTop;\n            }\n        }\n\n        return {x, y};\n    }\n\n    private applyPositionToStyle(position: DfPoint, dynamic: boolean): void {\n        this.nodeElementRef.nativeElement.style.transform = dynamic\n            ? `translate3D(${position.x}px, ${position.y}px, 0)`\n            : `translate(${position.x}px, ${position.y}px)`;\n    }\n\n    private getCenteredPosition(): DfPoint {\n        const {\n            panSize,\n            leftPosition: panZoomLeftPosition,\n            topPosition: panZoomTopPosition,\n        } = this.panZoomOptions;\n        const halfOfNodeWidth = this.nodeWidth / 2;\n        const halfOfNodeHeight = this.nodeHeight / 2;\n        const halfOfPanSize = panSize / 2;\n\n        const centeredPosition = {\n            x: this.value.position.x + halfOfPanSize - halfOfNodeWidth,\n            y: this.value.position.y + halfOfPanSize - halfOfNodeHeight,\n        };\n\n        if (panZoomTopPosition || panZoomTopPosition === 0) {\n            centeredPosition.y += halfOfNodeHeight;\n        }\n\n        if (panZoomLeftPosition || panZoomLeftPosition === 0) {\n            centeredPosition.x += halfOfNodeWidth;\n        }\n\n        return centeredPosition;\n    }\n\n    private subscribeToConnectorsChanges(): void {\n        if (!this.innerComponent) {\n            return;\n        }\n\n        this.previousOutputs = this.innerComponent?.outputs?.toArray() || [];\n        this.previousInputs = this.innerComponent?.inputs?.toArray() || [];\n\n        const connectorsUpdates$ = this.collectConnectorUpdateSources();\n\n        if (connectorsUpdates$.length > 0) {\n            merge(...connectorsUpdates$)\n                .pipe(takeUntilDestroyed(this.destroyRef))\n                .subscribe(() => this.updateConnectorsCoordinates());\n        }\n    }\n\n    private getCenterOfViewport(): DfPoint {\n        // Get the current scale of the pan\n        const {x: panPositionX, y: panPositionY, zoom} = this.panZoomService.panzoomModel;\n        const {\n            panSize,\n            leftPosition: panZoomLeftPosition,\n            topPosition: panZoomTopPosition,\n        } = this.panZoomOptions;\n        const halfOfPanSize = panSize / 2;\n\n        // Get current pan position\n        const scaledPanPositionX = halfOfPanSize + (panPositionX * -1) / zoom;\n        const scaledPanPositionY = halfOfPanSize + (panPositionY * -1) / zoom;\n\n        // Calculating the center of the visible part of the viewport relative to the whole board\n        const position = {\n            x: scaledPanPositionX - halfOfPanSize,\n            y: scaledPanPositionY - halfOfPanSize,\n        };\n\n        if (panZoomLeftPosition) {\n            position.x -=\n                (this.drawFlowElement.offsetWidth / 2) * -1 +\n                panZoomLeftPosition +\n                this.nodeWidth / 2;\n        }\n\n        if (panZoomTopPosition) {\n            position.y -=\n                (this.drawFlowElement.offsetHeight / 2) * -1 +\n                panZoomTopPosition +\n                this.nodeHeight / 2;\n        }\n\n        return position;\n    }\n\n    private setInitialPosition(): void {\n        const centeredPosition = this.getCenteredPosition();\n\n        this.applyPositionToStyle(centeredPosition, false);\n    }\n\n    /**\n     * Collects all sources of connector updates\n     */\n    private collectConnectorUpdateSources(): Array<Observable<void>> {\n        const sources: Array<Observable<void>> = [];\n\n        this.addContentComponentUpdates(sources);\n        this.addInputsUpdates(sources);\n        this.addOutputsUpdates(sources);\n\n        return sources;\n    }\n\n    /**\n     * Adds updates from the node content component\n     */\n    private addContentComponentUpdates(sources: Array<Observable<void>>): void {\n        if (this.innerComponent?.connectorsUpdated) {\n            sources.push(this.innerComponent.connectorsUpdated);\n        }\n    }\n\n    /**\n     * Adds updates from inputs\n     */\n    private addInputsUpdates(sources: Array<Observable<any>>): void {\n        if (this.innerComponent?.inputs?.changes) {\n            sources.push(\n                this.innerComponent.inputs.changes.pipe(\n                    tap((currentInputs: QueryList<DfInputComponent>) => {\n                        this.handleRemovedInputs(currentInputs);\n                    }),\n                ),\n            );\n        }\n    }\n\n    /**\n     * Adds updates from outputs with handling for removed items\n     */\n    private addOutputsUpdates(sources: Array<Observable<any>>): void {\n        if (this.innerComponent?.outputs?.changes) {\n            sources.push(\n                this.innerComponent.outputs.changes.pipe(\n                    tap((currentOutputs: QueryList<DfOutputComponent>) => {\n                        this.handleRemovedOutputs(currentOutputs);\n                        this.applyOutputsConnectionLabel();\n                    }),\n                ),\n            );\n        }\n    }\n\n    /**\n     * Processes removed inputs\n     */\n    private handleRemovedInputs(currentInputs: QueryList<DfInputComponent>): void {\n        const currentArray = currentInputs.toArray();\n        const removedOutputs = this.previousInputs.filter(\n            (prev) => !currentArray.some((curr) => curr === prev),\n        );\n\n        if (removedOutputs.length > 0) {\n            removedOutputs.forEach((output: DfInputComponent) => {\n                this.connectorDeleted.emit(output.data.connectorId);\n            });\n        }\n\n        this.previousInputs = currentArray;\n    }\n\n    /**\n     * Processes removed outputs\n     */\n    private handleRemovedOutputs(currentOutputs: QueryList<DfOutputComponent>): void {\n        const currentArray = currentOutputs.toArray();\n        const removedOutputs = this.previousOutputs.filter(\n            (prev) => !currentArray.some((curr) => curr === prev),\n        );\n\n        if (removedOutputs.length > 0) {\n            removedOutputs.forEach((output: DfOutputComponent) => {\n                this.connectorDeleted.emit(output.data.connectorId);\n            });\n        }\n\n        this.previousOutputs = currentArray;\n    }\n\n    private applyOutputsConnectionLabel(): void {\n        const connectionLabel = this.value.data.connectionLabel;\n\n        if (!connectionLabel) {\n            return;\n        }\n\n        this.innerComponent.outputs?.forEach((output: DfOutputComponent) => {\n            output.connectionLabel = connectionLabel;\n        });\n    }\n}\n","<div\n    #nodeElement\n    data-draw-flow-node\n    class=\"draw-flow-node\"\n    [style.cursor]=\"cursor\"\n    (dfDragDrop)=\"onDrag($event)\"\n    (dfSelectableElement)=\"onSelectedChanged($event)\"\n>\n    <div class=\"node-content\">\n        <ng-container #container />\n    </div>\n</div>\n","import {AsyncPipe, NgIf} from '@angular/common';\nimport {\n    ChangeDetectionStrategy,\n    Component,\n    ElementRef,\n    EventEmitter,\n    inject,\n    Output,\n} from '@angular/core';\nimport {ResizeObserverService} from '@ng-web-apis/resize-observer';\nimport type {Observable} from 'rxjs';\nimport {\n    animationFrameScheduler,\n    BehaviorSubject,\n    combineLatest,\n    fromEvent,\n    map,\n    merge,\n    startWith,\n    Subject,\n    take,\n    tap,\n    throttleTime,\n    timer,\n} from 'rxjs';\n\nimport {DF_FALSE_HANDLER, INITIAL_COORDINATES} from '../../consts';\nimport type {DfDragDrop} from '../../directives/drag-drop';\nimport {DfDragDropStage, DragDropDirective} from '../../directives/drag-drop';\nimport {DfResizeObserver} from '../../directives/resize-observer';\nimport {dfClamp, dfPx} from '../../helpers';\nimport type {DfPoint} from '../../ng-draw-flow.interfaces';\nimport {DRAW_FLOW_ROOT_ELEMENT} from '../../ng-draw-flow.token';\nimport {DF_PAN_ZOOM_INITIAL_SCALE} from './pan-zoom.const';\nimport type {DfPanZoomOptions} from './pan-zoom.options';\nimport {DF_PAN_ZOOM_OPTIONS} from './pan-zoom.options';\nimport {PanZoomService} from './pan-zoom.service';\nimport {ZoomDirective} from './zoom';\nimport type {DfZoom} from './zoom/zoom.interfaces';\n\n@Component({\n    standalone: true,\n    selector: 'df-pan-zoom',\n    imports: [AsyncPipe, DfResizeObserver, DragDropDirective, NgIf, ZoomDirective],\n    templateUrl: './pan-zoom.component.html',\n    styleUrls: ['./pan-zoom.component.less'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PanZoomComponent {\n    private readonly el = inject<ElementRef<HTMLElement>>(ElementRef);\n    private readonly panZoomService = inject(PanZoomService);\n    private readonly drawFlowRootElement = inject<HTMLElement>(DRAW_FLOW_ROOT_ELEMENT);\n    private readonly panZoomOptions: DfPanZoomOptions =\n        inject<DfPanZoomOptions>(DF_PAN_ZOOM_OPTIONS);\n\n    private readonly resizeObserver$ = inject(ResizeObserverService);\n    private readonly zoom$ = new BehaviorSubject<number>(DF_PAN_ZOOM_INITIAL_SCALE);\n    private readonly coordinates$ = new BehaviorSubject<DfPoint>(INITIAL_COORDINATES);\n    private readonly manualZoomAnimation$ = new Subject<boolean>();\n    private readonly dragStage$ = new Subject<DfDragDropStage>();\n\n    @Output()\n    protected readonly scale = new EventEmitter<number>();\n\n    protected readonly zoomAnimationDuration = this.panZoomOptions.zoomAnimationDuration;\n    protected readonly cursor$ = this.dragStage$.pipe(\n        map((stage) => (stage === DfDragDropStage.Move ? 'grabbing' : 'initial')),\n        startWith('initial'),\n    );\n\n    protected readonly transitioned$ = merge(\n        this.manualZoomAnimation$,\n        this.dragStage$.pipe(\n            map((stage: DfDragDropStage) => stage !== DfDragDropStage.Move),\n        ),\n        fromEvent(this.el.nativeElement, 'touchmove', {passive: true}).pipe(\n            throttleTime(16, animationFrameScheduler, {leading: true, trailing: true}),\n            map(DF_FALSE_HANDLER),\n        ),\n        fromEvent(this.el.nativeElement, 'wheel', {passive: true}).pipe(\n            throttleTime(16, animationFrameScheduler, {leading: true, trailing: true}),\n            map(DF_FALSE_HANDLER),\n        ),\n    );\n\n    protected readonly wrapperTransform$ = combineLatest([\n        this.coordinates$.pipe(\n            tap(({x, y}: DfPoint) => {\n                this.panZoomService.panzoomModel.x = x;\n                this.panZoomService.panzoomModel.y = y;\n            }),\n            map(({x, y}: DfPoint) => `${dfPx(x)}, ${dfPx(y)}`),\n        ),\n        this.zoom$.pipe(\n            tap((zoom: number) => {\n                this.scale.emit(Math.round(zoom * 100));\n                this.panZoomService.panzoomModel.zoom = zoom;\n            }),\n        ),\n    ]).pipe(\n        map(([translate, zoom]) => `translate(${translate}) scale(${zoom}) rotate(0deg)`),\n    );\n\n    protected readonly panZoomContainerTransform$: Observable<string> =\n        this.resizeObserver$.pipe(\n            map((entries: readonly ResizeObserverEntry[]) => entries[0]!.contentRect),\n            map((rootSize: DOMRectReadOnly) => {\n                let translate = '';\n                const {\n                    leftPosition: panZoomLeftPosition,\n                    topPosition: panZoomTopPosition,\n                } = this.panZoomOptions;\n\n                if (panZoomLeftPosition || panZoomLeftPosition === 0) {\n                    const offset = (rootSize.width / 2) * -1 + panZoomLeftPosition;\n\n                    this.panZoomService.panzoomModel.offsetX = offset * -1;\n\n                    translate = `translateX(${offset}px)`;\n                } else {\n                    this.panZoomService.panzoomModel.offsetX = 0;\n                }\n\n                if (panZoomTopPosition || panZoomTopPosition === 0) {\n                    const offset = (rootSize.height / 2) * -1 + panZoomTopPosition;\n\n                    this.panZoomService.panzoomModel.offsetY = offset * -1;\n\n                    translate = `${translate}translateY(${offset}px)`;\n                } else {\n                    this.panZoomService.panzoomModel.offsetY = 0;\n                }\n\n                return translate;\n            }),\n        );\n\n    protected onPan({distance, stage}: DfDragDrop): void {\n        if (this.panZoomService.panzoomDisabled) {\n            return;\n        }\n\n        this.dragStage$.next(stage);\n\n        this.coordinates$.next(\n            this.getGuardedCoordinates(\n                this.coordinates$.value.x + distance.deltaX,\n                this.coordinates$.value.y + distance.deltaY,\n            ),\n        );\n    }\n\n    protected onZoom({clientX, clientY, delta}: DfZoom): void {\n        const {x: offsetX, y: offsetY} = this.drawFlowRootElement.getBoundingClientRect();\n\n        this.processZoom(clientX - offsetX, clientY - offsetY, delta);\n    }\n\n    public resetPanzoom(): void {\n        this.zoom$.next(DF_PAN_ZOOM_INITIAL_SCALE);\n        this.coordinates$.next(INITIAL_COORDINATES);\n    }\n\n    public zoomIn(): void {\n        const {zoomStep, maxZoom} = this.panZoomOptions;\n        const zoom = this.panZoomService.panzoomModel.zoom + zoomStep;\n\n        this.setZoom(zoom <= maxZoom ? zoom : maxZoom);\n    }\n\n    public zoomOut(): void {\n        const {zoomStep, minZoom} = this.panZoomOptions;\n        const zoom = this.panZoomService.panzoomModel.zoom - zoomStep;\n\n        this.setZoom(zoom >= minZoom ? zoom : minZoom);\n    }\n\n    private setZoom(zoom: number): void {\n        this.manualZoomAnimation$.next(true);\n        this.zoom$.next(zoom);\n        const {x, y} = this.coordinates$.value;\n\n        this.coordinates$.next(this.getGuardedCoordinates(x, y));\n        timer(this.zoomAnimationDuration)\n            .pipe(take(1))\n            .subscribe(() => this.manualZoomAnimation$.next(false));\n    }\n\n    private processZoom(clientX: number, clientY: number, delta: number): void {\n        const oldScale = this.zoom$.value;\n        const {minZoom, maxZoom} = this.panZoomOptions;\n        const newScale = dfClamp(oldScale + delta, minZoom, maxZoom);\n\n        const center = this.getScaleCenter(\n            {clientX, clientY},\n            this.coordinates$.value,\n            this.zoom$.value,\n        );\n\n        const moveX = center.x * oldScale - center.x * newScale;\n        const moveY = center.y * oldScale - center.y * newScale;\n\n        this.zoom$.next(newScale);\n        this.coordinates$.next(\n            this.getGuardedCoordinates(\n                this.coordinates$.value.x + moveX,\n                this.coordinates$.value.y + moveY,\n            ),\n        );\n    }\n\n    private getGuardedCoordinates(x: number, y: number): DfPoint {\n        const {offsetX, offsetY} = this.offsets();\n\n        return {\n            x: dfClamp(x, -offsetX, offsetX),\n            y: dfClamp(y, -offsetY, offsetY),\n        };\n    }\n\n    private getScaleCenter(\n        {clientX, clientY}: {clientX: number; clientY: number},\n        {x, y}: DfPoint,\n        scale: number,\n    ): DfPoint {\n        const {offsetWidth, offsetHeight} = this.el.nativeElement;\n\n        return {\n            x: (clientX - x - offsetWidth / 2) / scale,\n            y: (clientY - y - offsetHeight / 2) / scale,\n        };\n    }\n\n    private offsets(): {offsetX: number; offsetY: number} {\n        const {panSize} = this.panZoomOptions;\n        const offsetX = this.zoom$.value * panSize;\n        const offsetY = this.zoom$.value * panSize;\n\n        return {offsetX, offsetY};\n    }\n}\n","<div\n    class=\"pan-zoom\"\n    [style.cursor]=\"cursor$ | async\"\n    [style.transform]=\"wrapperTransform$ | async\"\n    [style.transition-duration]=\"(transitioned$ | async) ? zoomAnimationDuration + 'ms' : '0s'\"\n    (dfDragDrop)=\"onPan($event)\"\n    (dfZoom)=\"onZoom($event)\"\n>\n    <div\n        class=\"panzoom__container\"\n        [style.transform]=\"panZoomContainerTransform$ | async\"\n    >\n        <ng-content />\n    </div>\n</div>\n","export const DF_PAN_ZOOM_INITIAL_SCALE = 1;\n","import type {FactoryProvider} from '@angular/core';\nimport {InjectionToken} from '@angular/core';\n\nexport interface DfPanZoomOptions {\n    panSize: number;\n    topPosition: number | null;\n    leftPosition: number | null;\n    minZoom: number;\n    maxZoom: number;\n    zoomStep: number;\n    zoomAnimationDuration: number;\n    zoomWheelSensitivity: number;\n    touchSensitivity: number;\n}\n\nexport const DF_PAN_ZOOM_DEFAULT_OPTIONS: DfPanZoomOptions = {\n    panSize: 20000,\n    topPosition: null,\n    leftPosition: null,\n    minZoom: 0.25,\n    maxZoom: 3,\n    zoomStep: 0.25,\n    zoomAnimationDuration: 300,\n    zoomWheelSensitivity: 0.01,\n    touchSensitivity: 0.01,\n};\n\nexport const DF_PAN_ZOOM_OPTIONS = new InjectionToken(\n    '[DF_PAN_ZOOM_OPTIONS]: [PAN_ZOOM_OPTIONS]',\n    {\n        factory: () => DF_PAN_ZOOM_DEFAULT_OPTIONS,\n    },\n);\n\nexport function dfPanZoomOptionsProvider(\n    options: Partial<DfPanZoomOptions>,\n): FactoryProvider {\n    return {\n        provide: DF_PAN_ZOOM_OPTIONS,\n        useFactory: (): DfPanZoomOptions => ({\n            ...DF_PAN_ZOOM_DEFAULT_OPTIONS,\n            ...options,\n        }),\n    };\n}\n","import {Injectable} from '@angular/core';\n\nimport type {DfPanzoomModel} from './pan-zoom.interfaces';\n\n@Injectable()\nexport class PanZoomService {\n    public panzoomModel: DfPanzoomModel = {x: 0, y: 0, offsetX: 0, offsetY: 0, zoom: 1};\n    public panzoomDisabled = false;\n}\n","export * from './zoom.directive';\n","import {Directive, inject} from '@angular/core';\n\nimport {ZoomService} from './zoom.service';\n\n@Directive({\n    standalone: true,\n    selector: '[dfZoom]',\n    outputs: ['dfZoom'],\n    providers: [ZoomService],\n    host: {\n        '[style.touch-action]': '\"none\"',\n    },\n})\nexport class ZoomDirective {\n    protected readonly dfZoom = inject(ZoomService);\n}\n","import {ElementRef, inject, Injectable} from '@angular/core';\nimport {\n    filter,\n    fromEvent,\n    map,\n    merge,\n    Observable,\n    scan,\n    switchMap,\n    takeUntil,\n    throttleTime,\n} from 'rxjs';\n\nimport {dfDistanceBetweenTouches, dfPreventDefault} from '../../../helpers';\nimport {DF_PAN_ZOOM_OPTIONS} from '../pan-zoom.options';\nimport type {DfZoom} from './zoom.interfaces';\n\n@Injectable()\nexport class ZoomService extends Observable<DfZoom> {\n    constructor() {\n        const nativeElement: HTMLElement = inject(ElementRef).nativeElement;\n        const options = inject(DF_PAN_ZOOM_OPTIONS);\n        const wheelSensitivity = options?.zoomWheelSensitivity;\n        const touchSensitivity = options?.touchSensitivity;\n\n        super((subscriber) => {\n            merge(\n                fromEvent<TouchEvent>(nativeElement, 'touchstart', {passive: true}).pipe(\n                    filter(({touches}) => touches.length > 1),\n                    switchMap((startEvent) =>\n                        fromEvent<TouchEvent>(nativeElement, 'touchmove', {\n                            passive: true,\n                        }).pipe(\n                            dfPreventDefault(),\n                            throttleTime(16),\n                            scan(\n                                (prev, event) => {\n                                    const distance = dfDistanceBetweenTouches(event);\n\n                                    return {\n                                        event,\n                                        distance,\n                                        delta:\n                                            (distance - prev.distance) * touchSensitivity,\n                                    };\n                                },\n                                {\n                                    event: startEvent,\n                                    distance: dfDistanceBetweenTouches(startEvent),\n                                    delta: 0,\n                                },\n                            ),\n                            map(({event, delta}) => {\n                                const [touch1, touch2] = [\n                                    event.touches[0] ?? {clientX: 0, clientY: 0},\n                                    event.touches[1] ?? {clientX: 0, clientY: 0},\n                                ];\n                                const clientX = (touch1.clientX + touch2.clientX) / 2;\n                                const clientY = (touch1.clientY + touch2.clientY) / 2;\n\n                                return {clientX, clientY, delta, event};\n                            }),\n                            takeUntil(fromEvent(nativeElement, 'touchend')),\n                        ),\n                    ),\n                ),\n                fromEvent<WheelEvent>(nativeElement, 'wheel', {passive: false}).pipe(\n                    dfPreventDefault(),\n                    map((wheel) => ({\n                        clientX: wheel.clientX,\n                        clientY: wheel.clientY,\n                        delta: -wheel.deltaY * wheelSensitivity,\n                        event: wheel,\n                    })),\n                ),\n            ).subscribe(subscriber);\n        });\n    }\n}\n","import {CommonModule} from '@angular/common';\nimport type {OnInit, Signal} from '@angular/core';\nimport {\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    DestroyRef,\n    EventEmitter,\n    forwardRef,\n    inject,\n    Output,\n} from '@angular/core';\nimport {takeUntilDestroyed} from '@angular/core/rxjs-interop';\nimport type {ControlValueAccessor} from '@angular/forms';\nimport {NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {filter} from 'rxjs';\n\nimport type {\n    DfDataConnection,\n    DfDataInitialNode,\n    DfDataModel,\n    DfDataNode,\n    DfEvent,\n} from '../../ng-draw-flow.interfaces';\nimport {INVALID_NODES} from '../../validators/invalid-nodes.token';\nimport {ConnectionComponent} from '../connections/connection/connection.component';\nimport {ConnectionsService} from '../connections/connections.service';\nimport {DraftConnectionComponent} from '../connections/draft-connection/draft-connection.component';\nimport {DraftConnectionService} from '../connections/draft-connection/draft-connection.service';\nimport {NodeComponent} from '../node/node.component';\nimport {DF_PAN_ZOOM_OPTIONS} from '../pan-zoom/pan-zoom.options';\n\n@Component({\n    standalone: true,\n    selector: 'df-scene',\n    imports: [CommonModule, ConnectionComponent, DraftConnectionComponent, NodeComponent],\n    templateUrl: './scene.component.html',\n    styleUrls: ['./scene.component.less'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    providers: [\n        {\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: forwardRef(() => SceneComponent),\n            multi: true,\n        },\n    ],\n    host: {\n        'data-element': 'scene',\n        '[style.height.px]': 'this.panSize',\n        '[style.width.px]': 'this.panSize',\n    },\n})\nexport class SceneComponent implements ControlValueAccessor, OnInit {\n    private readonly cdr = inject(ChangeDetectorRef);\n    private readonly connectionsService = inject(ConnectionsService);\n    private readonly draftConnectionService = inject(DraftConnectionService);\n    private readonly destroyRef = inject(DestroyRef);\n\n    @Output()\n    protected readonly nodeSelected = new EventEmitter<DfDataNode>();\n\n    @Output()\n    protected readonly nodeMoved = new EventEmitter<DfEvent<DfDataNode>>();\n\n    @Output()\n    protected readonly nodeDeleted = new EventEmitter<DfEvent<DfDataNode>>();\n\n    @Output()\n    protected readonly connectionCreated = new EventEmitter<DfEvent<DfDataConnection>>();\n\n    @Output()\n    protected readonly connectionDeleted = new EventEmitter<DfEvent<DfDataConnection>>();\n\n    @Output()\n    protected readonly connectionSelected = new EventEmitter<DfDataConnection>();\n\n    protected isConnectionCreating$ = this.draftConnectionService.isConnectionCreating$;\n    protected readonly panSize = inject(DF_PAN_ZOOM_OPTIONS).panSize;\n    protected model!: DfDataModel;\n    protected $invalidNodes: Signal<string[]> = inject(INVALID_NODES);\n\n    public ngOnInit(): void {\n        this.initializeConnectionsSubscription();\n    }\n\n    protected onConnectionCreated(connection: DfDataConnection): void {\n        this.connectionsService.addConnections([connection]);\n        this.connectionCreated.emit({\n            target: connection,\n            model: this.model,\n        });\n    }\n\n    protected onConnectionDeleted(connection: DfDataConnection): void {\n        this.connectionDeleted.emit({\n            target: connection,\n            model: this.model,\n        });\n    }\n\n    protected onConnectorDeleted(connectorId: string): void {\n        this.connectionsService.removeConnectionsByConnectorId(connectorId);\n        this.cdr.detectChanges();\n    }\n\n    protected onNodeMoved(updated: DfDataNode): void {\n        this.model = {\n            ...this.model,\n            nodes: this.model.nodes.map((n) => (n.id === updated.id ? updated : n)),\n        };\n        this.nodeMoved.emit({\n            target: updated,\n            model: this.model,\n        });\n    }\n\n    protected onNodeDeleted(id: string): void {\n        const deleted: DfDataNode = this.model.nodes.find(\n            (n) => n.id === id,\n        ) as DfDataNode;\n\n        this.model = {\n            ...this.model,\n            nodes: this.model.nodes.filter((n) => n.id !== id),\n        };\n        this.nodeDeleted.emit({target: deleted, model: this.model});\n        this.emitConnectionDeletedByNodeId(id);\n        this.connectionsService.removeConnectionsByNodeId(id);\n    }\n\n    protected onNodeSelected(node: DfDataNode): void {\n        this.nodeSelected.emit(node);\n    }\n\n    protected trackByNodeId(_: number, node: DfDataInitialNode | DfDataNode): string {\n        return node.id;\n    }\n\n    protected trackByConnectionsFn(_index: number, connection: DfDataConnection): string {\n        return `${connection.source.nodeId}-${connection.source.connectorId}to${connection.target.nodeId}-${connection.target.connectorId}`;\n    }\n\n    public writeValue(value: DfDataModel): void {\n        if (!value) {\n            return;\n        }\n\n        this.model = value;\n        this.connectionsService.addConnections(this.model.connections);\n\n        this.cdr.markForCheck();\n    }\n\n    public registerOnChange(fn: any): void {\n        this.onChange = fn;\n    }\n\n    public registerOnTouched(fn: any): void {\n        this.onTouched = fn;\n    }\n\n    private initializeConnectionsSubscription(): void {\n        this.connectionsService.connections$\n            .pipe(\n                filter(() => !!this.model),\n                takeUntilDestroyed(this.destroyRef),\n            )\n            .subscribe((connections: DfDataConnection[]) => {\n                this.model.connections = connections;\n                this.cdr.markForCheck();\n            });\n    }\n\n    private emitConnectionDeletedByNodeId(nodeId: string): void {\n        this.connectionsService.connections$.value\n            .filter(\n                (connection) =>\n                    connection.source.nodeId === nodeId ||\n                    connection.target.nodeId === nodeId,\n            )\n            ?.forEach((connection) =>\n                this.connectionDeleted.emit({target: connection, model: this.model}),\n            );\n    }\n\n    // @ts-ignore\n    private onChange: (value: DfDataModel) => void = (_: DfDataModel) => {};\n    // @ts-ignore\n    private onTouched: () => void = () => {};\n}\n","<ng-container *ngFor=\"let node of model?.nodes; trackBy: trackByNodeId\">\n    <df-node\n        [invalid]=\"$invalidNodes().includes(node.id)\"\n        [node]=\"node\"\n        (connectorDeleted)=\"onConnectorDeleted($event)\"\n        (nodeDeleted)=\"onNodeDeleted(node.id)\"\n        (nodeMoved)=\"onNodeMoved($event)\"\n        (nodeSelected)=\"onNodeSelected($event)\"\n    />\n</ng-container>\n\n<ng-container *ngFor=\"let connection of model?.connections; trackBy: trackByConnectionsFn\">\n    <df-connection\n        [connection]=\"connection\"\n        (connectionDeleted)=\"onConnectionDeleted(connection)\"\n        (connectionSelected)=\"connectionSelected.emit(connection)\"\n    />\n</ng-container>\n\n<df-draft-connection\n    *ngIf=\"isConnectionCreating$ | async\"\n    (connectionCreated)=\"onConnectionCreated($event)\"\n/>\n","/**\n * Handler that always returns `false`.\n */\nexport const DF_FALSE_HANDLER = (): false => false;\n\n/**\n * Handler that always returns `true`.\n */\nexport const DF_TRUE_HANDLER = (): true => true;\n","export * from './handlers';\nexport * from './initial-coordinates';\n","import type {DfPoint} from '../ng-draw-flow.interfaces';\n\nexport const INITIAL_COORDINATES: DfPoint = {x: 0, y: 0};\n","import {Directive, ElementRef, inject} from '@angular/core';\nimport type {Observable} from 'rxjs';\n\nimport type {DfDragDrop} from './drag-drop.interface';\nimport {DragDropService} from './drag-drop.service';\n\n@Directive({\n    standalone: true,\n    selector: '[dfDragDrop]',\n    outputs: ['dfDragDrop'],\n})\nexport class DragDropDirective {\n    protected readonly elementRef: ElementRef<HTMLElement> = inject(ElementRef);\n    protected readonly dfDragDrop: Observable<DfDragDrop> = inject(\n        DragDropService,\n    ).streamFor(this.elementRef.nativeElement);\n}\n","export enum DfDragDropStage {\n    Start = 'start',\n    Move = 'move',\n    End = 'end',\n}\n","import type {DfDragDropStage} from './drag-drop.enum';\n\nexport interface DfDragDropDistance {\n    deltaX: number;\n    deltaY: number;\n}\n\nexport interface DfDragDrop {\n    sourceElement: HTMLElement;\n    distance: DfDragDropDistance;\n    stage: DfDragDropStage;\n}\n","import {Injectable} from '@angular/core';\nimport type {Observable} from 'rxjs';\nimport {\n    animationFrameScheduler,\n    filter,\n    fromEvent,\n    map,\n    merge,\n    repeat,\n    share,\n    shareReplay,\n    switchMap,\n    take,\n    takeUntil,\n    throttleTime,\n} from 'rxjs';\n\nimport {DfDragDropStage} from './drag-drop.enum';\nimport type {DfDragDrop} from './drag-drop.interface';\n\n/**\n * Centralised RxJS-based drag-and-drop stream factory.\n * Creates **one** `pointermove / pointerup` listener on `document`\n * and produces per-element drag streams filtered by `pointerId`.\n */\n@Injectable({providedIn: 'root'})\nexport class DragDropService {\n    /** Cache for element-scoped `pointerdown` observables (lazy–created). */\n    private readonly pointerDownMap = new WeakMap<\n        HTMLElement,\n        Observable<PointerEvent>\n    >();\n\n    /** Cache for ready-made drag-stream observables (so we never duplicate work). */\n    private readonly dragDropStreams = new WeakMap<HTMLElement, Observable<DfDragDrop>>();\n\n    /** Shared `pointermove` stream on the whole document (ref-counted). */\n    private readonly pointerMove$ = fromEvent<PointerEvent>(document, 'pointermove').pipe(\n        share(),\n    );\n\n    /** Shared `pointerup` stream on the whole document (ref-counted). */\n    private readonly pointerUp$ = fromEvent<PointerEvent>(document, 'pointerup').pipe(\n        share(),\n    );\n\n    /**\n     * Returns (and caches) a drag-and-drop observable for the provided element.\n     * The observable emits:\n     *   • `DfDragDropStage.Move` every animation frame while the pointer is down;\n     *   • a final `DfDragDropStage.End` when the pointer is released.\n     */\n    public streamFor(el: HTMLElement): Observable<DfDragDrop> {\n        const cached = this.dragDropStreams.get(el);\n\n        if (cached) {\n            return cached;\n        }\n\n        const pointerDown$ =\n            this.pointerDownMap.get(el) ??\n            fromEvent<PointerEvent>(el, 'pointerdown', {passive: true}).pipe(share());\n\n        this.pointerDownMap.set(el, pointerDown$);\n\n        const drag$: Observable<DfDragDrop> = pointerDown$.pipe(\n            switchMap((startEvent: PointerEvent): Observable<DfDragDrop> => {\n                const id = startEvent.pointerId;\n                let lastPointerEvent = startEvent;\n\n                const pointerUpStream$ = this.pointerUp$.pipe(\n                    filter((e) => e.pointerId === id),\n                    take(1),\n                    map(\n                        (): DfDragDrop => ({\n                            stage: DfDragDropStage.End,\n                            sourceElement: el,\n                            distance: {deltaX: 0, deltaY: 0},\n                        }),\n                    ),\n                    shareReplay({bufferSize: 1, refCount: false}),\n                );\n\n                const pointerMoveStream$ = this.pointerMove$.pipe(\n                    filter((e) => e.pointerId === id),\n                    throttleTime(16, animationFrameScheduler, {\n                        leading: true,\n                        trailing: true,\n                    }),\n                    map((e) => {\n                        const dx = e.clientX - lastPointerEvent.clientX;\n                        const dy = e.clientY - lastPointerEvent.clientY;\n\n                        lastPointerEvent = e;\n\n                        return <DfDragDrop>{\n                            stage: DfDragDropStage.Move,\n                            sourceElement: el,\n                            distance: {deltaX: dx, deltaY: dy},\n                        };\n                    }),\n                    takeUntil(pointerUpStream$),\n                );\n\n                return merge(pointerMoveStream$, pointerUpStream$);\n            }),\n            repeat(),\n            share(),\n        );\n\n        this.dragDropStreams.set(el, drag$);\n\n        return drag$;\n    }\n}\n","export * from './drag-drop.directive';\nexport * from './drag-drop.enum';\nexport * from './drag-drop.interface';\nexport * from './drag-drop.service';\n","import type {OnInit} from '@angular/core';\nimport {DestroyRef, Directive, inject} from '@angular/core';\nimport {takeUntilDestroyed} from '@angular/core/rxjs-interop';\nimport {NgControl} from '@angular/forms';\nimport {combineLatest, distinctUntilChanged, map, startWith} from 'rxjs';\n\nimport {deepEqual} from '../../helpers';\nimport {collectInvalidNodeIds} from '../../helpers/collect-invalid-node-ids';\nimport {INVALID_NODES} from '../../validators/invalid-nodes.token';\n\n@Directive({standalone: true, selector: '[dfErrors]'})\nexport class ErrorsDirective implements OnInit {\n    private readonly destroyRef = inject(DestroyRef);\n    private readonly ngControl = inject(NgControl);\n    private readonly $invalidNodes = inject(INVALID_NODES);\n\n    public ngOnInit(): void {\n        if (!this.ngControl?.control) {\n            return;\n        }\n\n        const control = this.ngControl.control;\n\n        combineLatest([\n            control.statusChanges.pipe(startWith(control.status)),\n            control.valueChanges.pipe(startWith(control.value)),\n        ])\n            .pipe(\n                map(() => collectInvalidNodeIds(control.errors)),\n                distinctUntilChanged(deepEqual),\n                takeUntilDestroyed(this.destroyRef),\n            )\n            .subscribe((idsSet: Set<string>) => {\n                this.$invalidNodes.set(Array.from(idsSet));\n            });\n    }\n}\n","export * from './errors.directive';\n","export * from './drag-drop';\nexport * from './errors';\nexport * from './resize-observer';\nexport * from './selectable-element';\n","export * from './resize-observer.directive';\n","import {Directive, ElementRef, inject} from '@angular/core';\nimport {\n    RESIZE_OPTION_BOX,\n    RESIZE_OPTION_BOX_DEFAULT,\n    ResizeObserverService,\n} from '@ng-web-apis/resize-observer';\n\n/**\n * @deprecated: internal use only\n * TODO: Remove this directive after EOL Taiga UI 3\n */\n@Directive({\n    standalone: true,\n    selector: '[dfResizeObserver]',\n    inputs: ['dfResizeBox: box'],\n    outputs: ['dfResizeObserver'],\n    providers: [\n        ResizeObserverService,\n        {\n            provide: RESIZE_OPTION_BOX,\n            useFactory: (): ResizeObserverBoxOptions =>\n                inject(ElementRef).nativeElement.getAttribute('dfResizeBox') ||\n                RESIZE_OPTION_BOX_DEFAULT,\n        },\n    ],\n})\nexport class DfResizeObserver {\n    protected readonly dfResizeObserver = inject(ResizeObserverService);\n\n    public box: ResizeObserverBoxOptions = RESIZE_OPTION_BOX_DEFAULT;\n}\n","export * from './selectable-element.directive';\n","import type {OnDestroy, OnInit} from '@angular/core';\nimport {Directive, ElementRef, EventEmitter, inject, Output} from '@angular/core';\n\nimport {SelectionService} from '../../services/selection.service';\n\n@Directive({\n    standalone: true,\n    selector: '[dfSelectableElement]',\n})\nexport class SelectableElementDirective implements OnInit, OnDestroy {\n    private selected = false;\n    private readonly el = inject(ElementRef<HTMLElement>);\n    private readonly selectionService = inject(SelectionService);\n    private unregisterFn: (() => void) | null = null;\n\n    @Output('dfSelectableElement')\n    protected readonly selectionChanged = new EventEmitter<boolean>();\n\n    public ngOnInit(): void {\n        // Register the element in the service and save the unregistration function.\n        this.unregisterFn = this.selectionService.registerElement(\n            this.el.nativeElement,\n            (selected) => this.handleSelectionChange(selected),\n        );\n    }\n\n    public ngOnDestroy(): void {\n        // Unregister when the directive is destroyed\n        if (this.unregisterFn) {\n            this.unregisterFn();\n            this.unregisterFn = null;\n        }\n    }\n\n    private handleSelectionChange(selected: boolean): void {\n        if (this.selected !== selected) {\n            this.selected = selected;\n            this.selectionChanged.emit(selected);\n        }\n    }\n}\n","/**\n * Clamps a value between two inclusive limits\n *\n * @param value\n * @param min lower limit\n * @param max upper limit\n */\nexport function dfClamp(value: number, min: number, max: number): number {\n    return Math.min(max, Math.max(min, value));\n}\n","import type {ValidationErrors} from '@angular/forms';\n\nexport function collectInvalidNodeIds(errors: ValidationErrors | null): Set<string> {\n    if (!errors) {\n        return new Set();\n    }\n\n    const allIds: string[] = Object.values(errors)\n        .map((v) => {\n            if (Array.isArray(v) && v.every((x) => typeof x === 'string')) {\n                return v as string[];\n            }\n\n            if (v && typeof v === 'object' && Array.isArray(v.nodeIds)) {\n                return v.nodeIds as string[];\n            }\n\n            return [];\n        })\n        .reduce<string[]>((acc, arr) => acc.concat(arr), []);\n\n    return new Set(allIds);\n}\n","import type {DfConnectionPoint, DfDataConnector} from '../ng-draw-flow.interfaces';\n\nexport function isConnectorType(type: string): type is DfConnectionPoint {\n    return ['input', 'output'].includes(type);\n}\n\n/**\n * Creates a unique string identifier for a connector.\n *\n * The function generates a string that uniquely identifies a connector\n * based on its key properties: node identifier, connector type, and\n * connector identifier. The resulting identifier is used\n * as a key in various data structures (e.g., in connectionPointsMap)\n * for tracking and updating connector positions.\n *\n * @param connector - Connector object containing nodeId, connectorType, and connectorId\n * @returns String identifier in the format \"nodeId:value,connectorType:value,connectorId:value\"\n */\nexport function createConnectorHash(connector: DfDataConnector): string {\n    return `nodeId:${connector.nodeId},connectorType:${connector.connectorType},connectorId:${connector.connectorId}`;\n}\n","/**\n * Deep comparison of two values\n * @param a - first value to compare\n * @param b - second value to compare\n * @param visited - Map to track visited objects (for circular reference detection)\n * @returns boolean result of comparison\n */\nexport function deepEqual(a: any, b: any, visited = new Map()): boolean {\n    // 1. Strict equality & primitives\n    if (a === b) {\n        return true;\n    }\n\n    if (a == null || b == null) {\n        return false;\n    } // handles null & undefined\n\n    const typeA = typeof a;\n    const typeB = typeof b;\n\n    if (typeA !== typeB) {\n        return false;\n    }\n\n    // Special-case NaN\n    if (typeA !== 'object') {\n        return typeA === 'number' && Number.isNaN(a) && Number.isNaN(b);\n    }\n\n    // 2. Circular-reference handling\n    if (visited.has(a)) {\n        return visited.get(a) === b;\n    }\n\n    visited.set(a, b);\n\n    // 3. Arrays\n    const isArrayA = Array.isArray(a);\n    const isArrayB = Array.isArray(b);\n\n    if (isArrayA !== isArrayB) {\n        return false;\n    }\n\n    if (isArrayA) {\n        if (a.length !== b.length) {\n            return false;\n        }\n\n        for (let i = 0; i < a.length; i++) {\n            if (!deepEqual(a[i], b[i], visited)) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    // 4. Special built-ins\n    if (a instanceof Date && b instanceof Date) {\n        return a.getTime() === b.getTime();\n    }\n\n    if (a instanceof RegExp && b instanceof RegExp) {\n        return a.toString() === b.toString();\n    }\n\n    // 5. Map\n    if (a instanceof Map && b instanceof Map) {\n        if (a.size !== b.size) {\n            return false;\n        }\n\n        for (const [key, value] of a.entries()) {\n            if (!b.has(key) || !deepEqual(value, b.get(key), visited)) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    // 6. Set\n    if (a instanceof Set && b instanceof Set) {\n        if (a.size !== b.size) {\n            return false;\n        }\n\n        const arrA = Array.from(a);\n        const arrB = Array.from(b);\n\n        const primitivesOnly = (arr: unknown[]): boolean =>\n            arr.every((item) => typeof item !== 'object' || item === null);\n\n        // Primitive sets → sort with comparator for deterministic equality\n        if (primitivesOnly(arrA) && primitivesOnly(arrB)) {\n            const primitiveCompare = (x: unknown, y: unknown): number =>\n                typeof x === 'number' && typeof y === 'number'\n                    ? x - y\n                    : String(x).localeCompare(String(y));\n\n            arrA.sort(primitiveCompare);\n            arrB.sort(primitiveCompare);\n\n            for (let i = 0; i < arrA.length; i++) {\n                if (arrA[i] !== arrB[i]) {\n                    return false;\n                }\n            }\n\n            return true;\n        }\n\n        // Non-primitive sets → element-wise deep comparison\n        return (\n            arrA.every((itemA) =>\n                arrB.some((itemB) => deepEqual(itemA, itemB, new Map(visited))),\n            ) &&\n            arrB.every((itemB) =>\n                arrA.some((itemA) => deepEqual(itemA, itemB, new Map(visited))),\n            )\n        );\n    }\n\n    // 7. Plain objects\n    const keysA = Object.keys(a);\n    const keysB = Object.keys(b);\n\n    if (keysA.length !== keysB.length) {\n        return false;\n    }\n\n    return keysA.every(\n        (key) =>\n            Object.prototype.hasOwnProperty.call(b, key) &&\n            deepEqual(a[key], b[key], visited),\n    );\n}\n","import type {DfDelta} from '../ng-draw-flow.interfaces';\n\nexport function dfDistanceBetweenPoints(\n    firstEvent: PointerEvent,\n    secondEvent: PointerEvent,\n): DfDelta {\n    const deltaX = secondEvent.clientX - firstEvent.clientX;\n    const deltaY = secondEvent.clientY - firstEvent.clientY;\n\n    return {deltaX, deltaY};\n}\n","export function dfDistanceBetweenTouches({touches}: TouchEvent): number {\n    return Math.hypot(\n        (touches[0]?.clientX ?? 0) - (touches[1]?.clientX ?? 0),\n        (touches[0]?.clientY ?? 0) - (touches[1]?.clientY ?? 0),\n    );\n}\n","import type {MonoTypeOperatorFunction} from 'rxjs';\nimport {tap} from 'rxjs';\n\nexport function dfPreventDefault<T extends Event>(): MonoTypeOperatorFunction<T> {\n    return tap((event) => event.preventDefault());\n}\n\nexport function dfStopPropagation<T extends Event>(): MonoTypeOperatorFunction<T> {\n    return tap((event) => event.stopPropagation());\n}\n","export * from './clamp';\nexport * from './connector';\nexport * from './deep-equal';\nexport * from './distance-between-points';\nexport * from './distance-between-touches';\nexport * from './events';\nexport * from './px';\n","/**\n * Adds 'px' to the number and turns it into a string\n */\nexport function dfPx(value: number): string {\n    return `${value}px`;\n}\n","import type {QueryList} from '@angular/core';\nimport {\n    ChangeDetectorRef,\n    Directive,\n    EventEmitter,\n    inject,\n    Input,\n    Output,\n    ViewChildren,\n} from '@angular/core';\n\nimport {DfInputComponent, DfOutputComponent} from './components/connectors';\n\n/**\n * Base abstract class for DrawFlow nodes.\n * Provides common functionality and structure for all node types in the flow diagram.\n */\n@Directive({\n    standalone: true,\n    host: {\n        '[class.df-invalid]': 'this.invalid',\n        '[class.df-selected]': 'this.selected',\n    },\n})\nexport abstract class DrawFlowBaseNode {\n    private invalidState = false;\n    private readonly cdr = inject(ChangeDetectorRef);\n    /**\n     * Collection of input connectors for this node.\n     * Accessible from outside to monitor changes in the number of inputs.\n     */\n    @ViewChildren(DfInputComponent)\n    public inputs!: QueryList<DfInputComponent>;\n\n    /**\n     * Collection of output connectors for this node.\n     * Accessible from outside to monitor changes in the number of outputs.\n     */\n    @ViewChildren(DfOutputComponent)\n    public outputs!: QueryList<DfOutputComponent>;\n\n    /**\n     * Unique identifier for the node.\n     * Can be used to create connector names in format `${nodeId}-${uniqConnectorId}`.\n     * @default ''\n     */\n    @Input()\n    public nodeId = '';\n\n    /**\n     * Metadata for the node.\n     * Contains type information and other node-specific data.\n     */\n    @Input()\n    public model!: Record<string, any> & {type: string};\n\n    /**\n     * Indicates if this node is a starting node in the flow.\n     * Can be used to apply special styling or behavior for start nodes.\n     * @default false\n     */\n    @Input()\n    public startNode? = false;\n\n    /**\n     * Indicates if this node is an ending node in the flow.\n     * Can be used to hide output connectors or apply special styling.\n     * @default false\n     */\n    @Input()\n    public endNode? = false;\n\n    /**\n     * Selection state of the node.\n     * Changes when the node is clicked or deselected.\n     * Applied as 'df-selected' CSS class when true.\n     * @default false\n     */\n    @Input()\n    public selected = false;\n\n    /**\n     * Validation state of the node.\n     * Can be manually set to highlight the node with red color,\n     * for example when a form inside the node is invalid.\n     * Applied as 'df-invalid' CSS class when true.\n     * @default false\n     */\n    @Input()\n    public set invalid(value: boolean) {\n        this.invalidState = value;\n    }\n\n    public get invalid(): boolean {\n        return this.invalidState;\n    }\n\n    @Output()\n    public readonly connectorsUpdated = new EventEmitter<void>();\n\n    public markForCheck(): void {\n        this.cdr.markForCheck();\n    }\n}\n","import {NgIf} from '@angular/common';\nimport type {OnInit} from '@angular/core';\nimport {\n    ChangeDetectionStrategy,\n    Component,\n    DestroyRef,\n    ElementRef,\n    EventEmitter,\n    forwardRef,\n    inject,\n    Output,\n    signal,\n    ViewChild,\n} from '@angular/core';\nimport {takeUntilDestroyed} from '@angular/core/rxjs-interop';\nimport type {ControlValueAccessor} from '@angular/forms';\nimport {FormControl, NG_VALUE_ACCESSOR, ReactiveFormsModule} from '@angular/forms';\nimport {debounceTime, filter} from 'rxjs';\n\nimport {ConnectionsService} from './components/connections/connections.service';\nimport {DraftConnectionService} from './components/connections/draft-connection/draft-connection.service';\nimport {PanZoomComponent} from './components/pan-zoom/pan-zoom.component';\nimport {PanZoomService} from './components/pan-zoom/pan-zoom.service';\nimport {SceneComponent} from './components/scene/scene.component';\nimport {DfResizeObserver, ErrorsDirective} from './directives';\nimport type {\n    DfDataConnection,\n    DfDataModel,\n    DfDataNode,\n    DfEvent,\n} from './ng-draw-flow.interfaces';\nimport {DRAW_FLOW_ROOT_ELEMENT} from './ng-draw-flow.token';\nimport {CoordinatesService} from './services/coordinates.service';\nimport {SelectionService} from './services/selection.service';\n\n/**\n * Root component of **ng-draw-flow** – a lightweight graph editor\n * capable of rendering and manipulating hundreds of nodes and edges.\n *\n * * Acts as a form-field (`ControlValueAccessor`) whose value is the\n *   entire diagram (`DfDataModel`).\n * * Wraps the low-level services (`PanZoomService`, `ConnectionsService`\n *   …) and re-emits high-level events so host applications can stay\n *   framework-agnostic.\n * * Exposes a minimal public API (`zoomIn`, `zoomOut`, `resetPosition`,\n *   `removeConnection`) for programmatic control.\n */\n@Component({\n    standalone: true,\n    selector: 'ng-draw-flow',\n    imports: [\n        DfResizeObserver,\n        NgIf,\n        PanZoomComponent,\n        ReactiveFormsModule,\n        SceneComponent,\n    ],\n    templateUrl: './ng-draw-flow.component.html',\n    styleUrls: ['./ng-draw-flow.component.less'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    providers: [\n        PanZoomService,\n        ConnectionsService,\n        CoordinatesService,\n        DraftConnectionService,\n        SelectionService,\n        {\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: forwardRef(() => NgDrawFlowComponent),\n            multi: true,\n        },\n        {\n            provide: DRAW_FLOW_ROOT_ELEMENT,\n            useFactory: ({nativeElement}: ElementRef<HTMLElement>) => nativeElement,\n            deps: [ElementRef],\n        },\n    ],\n    hostDirectives: [\n        ErrorsDirective,\n        {\n            directive: DfResizeObserver,\n            outputs: ['dfResizeObserver'],\n        },\n    ],\n    host: {\n        '(dfResizeObserver)': 'this.onResize($event)',\n    },\n})\nexport class NgDrawFlowComponent implements ControlValueAccessor, OnInit {\n    private readonly destroyRef = inject(DestroyRef);\n    private readonly connectionsService = inject(ConnectionsService);\n\n    @ViewChild(PanZoomComponent)\n    protected panzoom!: PanZoomComponent;\n\n    /** Emits the *current* zoom factor each time it changes. */\n    @Output()\n    protected readonly scale = new EventEmitter<number>();\n\n    /** Fired after a new edge is successfully created. */\n    @Output()\n    protected readonly connectionCreated = new EventEmitter<DfEvent<DfDataConnection>>();\n\n    /** Fired after an edge is removed—via UI or `removeConnection()`. */\n    @Output()\n    protected readonly connectionDeleted = new EventEmitter<DfEvent<DfDataConnection>>();\n\n    /** Fired when an edge receives focus in the scene. */\n    @Output()\n    protected readonly connectionSelected = new EventEmitter<DfDataConnection>();\n\n    /** Fired when a node receives focus in the scene. */\n    @Output()\n    protected readonly nodeSelected = new EventEmitter<DfDataNode>();\n\n    /** Fired whenever the user drags a node to a new position. */\n    @Output()\n    protected readonly nodeMoved = new EventEmitter<DfEvent<DfDataNode>>();\n\n    /** Fired when a node is removed from the graph. */\n    @Output()\n    protected readonly nodeDeleted = new EventEmitter<DfEvent<DfDataNode>>();\n\n    protected readonly form = new FormControl<DfDataModel>({\n        nodes: [],\n        connections: [],\n    });\n\n    protected readonly $rootReady = signal<boolean>(false);\n\n    public ngOnInit(): void {\n        this.watchFormChanges();\n    }\n\n    public writeValue(value: DfDataModel): void {\n        if (!value) {\n            return;\n        }\n\n        this.form.setValue(value, {emitEvent: false});\n    }\n\n    public registerOnChange(fn: (value: DfDataModel) => void): void {\n        this.onChange = fn;\n    }\n\n    public registerOnTouched(fn: () => void): void {\n        this.onTouched = fn;\n    }\n\n    /** Zooms one step *in* towards the center of the scene. */\n    public zoomIn(): void {\n        this.panzoom.zoomIn();\n    }\n\n    /** Zooms one step *out* from the center of the scene. */\n    public zoomOut(): void {\n        this.panzoom.zoomOut();\n    }\n\n    /** Resets both zoom factor and pan offset to their defaults. */\n    public resetPosition(): void {\n        this.panzoom.resetPanzoom();\n    }\n\n    /** Method that removes an existing edge. */\n    public removeConnection(connection: DfDataConnection): void {\n        this.connectionsService.removeConnection(connection);\n    }\n\n    protected onConnectionCreated(event: DfEvent<DfDataConnection>): void {\n        this.connectionCreated.emit(event);\n        this.form.setValue(event.model);\n    }\n\n    protected onConnectionDeleted(event: DfEvent<DfDataConnection>): void {\n        this.connectionDeleted.emit(event);\n        this.form.setValue(event.model);\n    }\n\n    protected onNodeDeleted(event: DfEvent<DfDataNode>): void {\n        this.nodeDeleted.emit(event);\n        this.form.setValue(event.model);\n    }\n\n    protected onNodeMoved(event: DfEvent<DfDataNode>): void {\n        this.nodeMoved.emit(event);\n        this.form.setValue(event.model);\n    }\n\n    protected onResize(event: any): void {\n        const {width, height} = event[0].contentRect;\n\n        this.$rootReady.set(width && height);\n    }\n\n    private watchFormChanges(): void {\n        this.form.valueChanges\n            .pipe(filter(Boolean), debounceTime(10), takeUntilDestroyed(this.destroyRef))\n            .subscribe((value: DfDataModel) => {\n                this.onChange(value);\n            });\n    }\n\n    private onChange: (value: DfDataModel) => void = (_: DfDataModel) => {};\n    // @ts-ignore\n    private onTouched: () => void = () => {};\n}\n","<df-pan-zoom (scale)=\"scale.emit($event)\">\n    <df-scene\n        *ngIf=\"$rootReady()\"\n        [formControl]=\"form\"\n        (connectionCreated)=\"onConnectionCreated($event)\"\n        (connectionDeleted)=\"onConnectionDeleted($event)\"\n        (connectionSelected)=\"connectionSelected.emit($event)\"\n        (nodeDeleted)=\"onNodeDeleted($event)\"\n        (nodeMoved)=\"onNodeMoved($event)\"\n        (nodeSelected)=\"nodeSelected.emit($event)\"\n    />\n</df-pan-zoom>\n","import type {FactoryProvider} from '@angular/core';\nimport {InjectionToken} from '@angular/core';\n\nimport type {DfOptions, DfOptionsInput} from './ng-draw-flow.interfaces';\nimport {DfArrowhead, DfConnectionType} from './ng-draw-flow.interfaces';\n\nexport const DRAW_FLOW_DEFAULT_OPTIONS: DfOptions = {\n    connection: {\n        arrowhead: {type: DfArrowhead.None, width: 8, height: 4},\n        type: DfConnectionType.Bezier,\n        curvature: 0.25,\n    },\n    nodes: {},\n    options: {\n        nodeDragThreshold: 1,\n        nodesDraggable: true,\n        nodesDeletable: true,\n        connectionsDeletable: true,\n        connectionsCreatable: true,\n    },\n};\n\nexport const DRAW_FLOW_OPTIONS = new InjectionToken('[DRAW_FLOW_OPTIONS]: Options', {\n    factory: () => DRAW_FLOW_DEFAULT_OPTIONS,\n});\n\nexport function provideNgDrawFlowConfigs(options: DfOptionsInput = {}): FactoryProvider {\n    return {\n        provide: DRAW_FLOW_OPTIONS,\n        useFactory: (): DfOptions => ({\n            connection: {\n                ...DRAW_FLOW_DEFAULT_OPTIONS.connection,\n                ...options.connection,\n                arrowhead: {\n                    ...DRAW_FLOW_DEFAULT_OPTIONS.connection.arrowhead,\n                    ...options.connection?.arrowhead,\n                },\n            },\n            nodes: {\n                ...DRAW_FLOW_DEFAULT_OPTIONS.nodes,\n                ...options.nodes,\n            },\n            options: {\n                ...DRAW_FLOW_DEFAULT_OPTIONS.options,\n                ...options.options,\n            },\n        }),\n    };\n}\n","import type {Type} from '@angular/core';\nimport type {PolymorpheusContent} from '@taiga-ui/polymorpheus';\n\nimport type {DrawFlowBaseNode} from './ng-draw-flow-node.base';\n\nexport enum DfConnectionType {\n    Bezier = 'bezier',\n    SmoothStep = 'smoothStep',\n}\n\nexport enum DfConnectorPosition {\n    Top = 'top',\n    Right = 'right',\n    Bottom = 'bottom',\n    Left = 'left',\n}\n\nexport enum DfArrowhead {\n    Arrow = 'arrow',\n    ArrowClosed = 'arrowClosed',\n    None = 'none',\n}\n\nexport interface DfArrowheadOptions {\n    type: DfArrowhead;\n    width: number;\n    height: number;\n}\n\nexport interface DfArrowheadOptionsInput {\n    type?: DfArrowhead;\n    width?: number;\n    height?: number;\n}\n\nexport interface DfConnectionOptions {\n    type: DfConnectionType;\n    arrowhead: DfArrowheadOptions;\n    curvature: number;\n}\n\nexport interface DfConnectionOptionsInput {\n    type: DfConnectionType;\n    arrowhead: DfArrowheadOptionsInput;\n    curvature: number;\n}\n\nexport interface DfWorkspaceOptions {\n    nodeDragThreshold: number;\n    nodesDraggable: boolean;\n    nodesDeletable: boolean;\n    connectionsDeletable: boolean;\n    connectionsCreatable: boolean;\n}\n\nexport interface DfOptions {\n    connection: DfConnectionOptions;\n    nodes: DfComponents;\n    options: DfWorkspaceOptions;\n}\n\nexport interface DfOptionsInput {\n    connection?: Partial<DfConnectionOptionsInput>;\n    nodes?: DfComponents;\n    options?: Partial<DfWorkspaceOptions>;\n}\n\nexport type DfComponents = Record<string, Type<DrawFlowBaseNode>>;\n\nexport interface DfPoint {\n    x: number;\n    y: number;\n}\n\nexport interface DfDelta {\n    deltaX: number;\n    deltaY: number;\n}\n\nexport interface DfDataModel {\n    nodes: Array<DfDataInitialNode | DfDataNode>;\n    connections: DfDataConnection[];\n}\n\nexport interface DfDataInitialNode {\n    id: string;\n    data: {\n        type: string;\n        connectionLabel?: DfConnectionLabel;\n        [key: string]: any;\n    };\n    startNode?: boolean;\n    endNode?: boolean;\n}\n\nexport interface DfDataNode extends DfDataInitialNode {\n    position: DfPoint;\n}\n\nexport interface DfConnectionLabel<Content = unknown, Context = unknown> {\n    content: PolymorpheusContent<Content>;\n    context?: Context;\n}\n\nexport interface DfDataConnection {\n    source: DfDataConnector;\n    target: DfDataConnector;\n    label?: DfConnectionLabel;\n}\n\nexport type DfId = string;\n\nexport interface DfDataConnector {\n    readonly nodeId: DfId;\n    readonly connectorType: DfConnectionPoint;\n    readonly connectorId: DfId;\n    readonly position?: string;\n    readonly connectionLabel?: DfConnectionLabel;\n}\n\nexport interface DfDataConnectorConfig {\n    readonly nodeId: DfId;\n    readonly connectorId: DfId;\n    readonly single: boolean;\n}\n\nexport interface DfConnectorData {\n    point: DfPoint;\n    position: DfConnectorPosition | null;\n}\n\nexport enum DfConnectionPoint {\n    Input = 'input',\n    Output = 'output',\n}\n\nexport interface DfEvent<T> {\n    readonly target: T;\n    readonly model: DfDataModel;\n}\n","import {InjectionToken} from '@angular/core';\n\nexport const DRAW_FLOW_ROOT_ELEMENT = new InjectionToken<HTMLElement>(\n    'DRAW_FLOW_ROOT_ELEMENT',\n);\n","import {Injectable} from '@angular/core';\nimport {BehaviorSubject, ReplaySubject} from 'rxjs';\n\nimport type {\n    DfConnectorData,\n    DfConnectorPosition,\n    DfPoint,\n} from '../ng-draw-flow.interfaces';\n\n@Injectable()\nexport class CoordinatesService {\n    private connectionPointsMap: Record<string, BehaviorSubject<DfConnectorData>> = {};\n\n    public connectionPointsMapChange$: ReplaySubject<void> = new ReplaySubject<void>(1);\n\n    public getConnectionPoint(\n        connectorHash: string,\n    ): BehaviorSubject<DfConnectorData> | BehaviorSubject<null> {\n        return this.connectionPointsMap[connectorHash] || new BehaviorSubject(null);\n    }\n\n    public addConnectionPoint(\n        connectorHash: string,\n        point: DfPoint,\n        position: DfConnectorPosition,\n    ): void {\n        if (this.connectionPointsMap[connectorHash]) {\n            this.connectionPointsMap[connectorHash]!.next({point, position});\n        } else {\n            this.connectionPointsMap[connectorHash] =\n                new BehaviorSubject<DfConnectorData>({\n                    point,\n                    position,\n                });\n        }\n\n        this.connectionPointsMapChange$.next();\n    }\n}\n","import type {OnDestroy} from '@angular/core';\nimport {inject, Injectable, NgZone} from '@angular/core';\n\ninterface SelectableItem {\n    element: HTMLElement;\n    callback: (selected: boolean) => void;\n}\n\n@Injectable()\nexport class SelectionService implements OnDestroy {\n    private readonly ngZone = inject(NgZone);\n    private readonly selectedElements = new Set<HTMLElement>();\n    private readonly registeredElements = new Map<HTMLElement, SelectableItem>();\n\n    private isDragging = false;\n    private clickedOnScene = false;\n    private startX: number | null = null;\n    private startY: number | null = null;\n    private readonly dragThreshold = 5;\n    private currentTarget: HTMLElement | null = null;\n    private readonly boundMouseDown = this.onMouseDown.bind(this);\n    private readonly boundMouseMove = this.onMouseMove.bind(this);\n    private readonly boundMouseUp = this.onMouseUp.bind(this);\n\n    constructor() {\n        // Use NgZone.runOutsideAngular to prevent change detection\n        // from running on every mouse event\n        this.ngZone.runOutsideAngular(() => {\n            document.addEventListener('mousedown', this.boundMouseDown);\n            document.addEventListener('mousemove', this.boundMouseMove);\n            document.addEventListener('mouseup', this.boundMouseUp);\n        });\n    }\n\n    public ngOnDestroy(): void {\n        document.removeEventListener('mousedown', this.boundMouseDown);\n        document.removeEventListener('mousemove', this.boundMouseMove);\n        document.removeEventListener('mouseup', this.boundMouseUp);\n\n        this.registeredElements.clear();\n        this.selectedElements.clear();\n    }\n\n    /**\n     * Registers an element for selection tracking\n     * @param element HTML element to track\n     * @param callback Callback function triggered when selection changes\n     * @returns Function to unregister\n     */\n    public registerElement(\n        element: HTMLElement,\n        callback: (selected: boolean) => void,\n    ): () => void {\n        this.registeredElements.set(element, {element, callback});\n\n        // Return a function to unregister\n        return () => {\n            this.unregisterElement(element);\n        };\n    }\n\n    /**\n     * Unregisters an element\n     * @param element HTML element to unregister\n     */\n    public unregisterElement(element: HTMLElement): void {\n        if (this.selectedElements.has(element)) {\n            this.selectedElements.delete(element);\n        }\n\n        this.registeredElements.delete(element);\n    }\n\n    /**\n     * Selects an element\n     * @param element HTML element to select\n     * @param exclusive If true, deselects all other elements\n     */\n    public selectElement(element: HTMLElement, exclusive = true): void {\n        if (exclusive) {\n            this.clearSelection(element);\n        }\n\n        if (!this.selectedElements.has(element)) {\n            this.selectedElements.add(element);\n            const item = this.registeredElements.get(element);\n\n            if (item) {\n                // Run callback inside Angular zone for change detection\n                this.ngZone.run(() => {\n                    item.callback(true);\n                });\n            }\n        }\n    }\n\n    /**\n     * Deselects an element\n     * @param element HTML element to deselect\n     */\n    public deselectElement(element: HTMLElement): void {\n        if (this.selectedElements.has(element)) {\n            this.selectedElements.delete(element);\n            const item = this.registeredElements.get(element);\n\n            if (item) {\n                this.ngZone.run(() => {\n                    item.callback(false);\n                });\n            }\n        }\n    }\n\n    /**\n     * Clears selection of all elements except the excluded one\n     * @param exceptElement Element to exclude from clearing\n     */\n    public clearSelection(exceptElement?: HTMLElement): void {\n        this.selectedElements.forEach((element) => {\n            if (element !== exceptElement) {\n                this.deselectElement(element);\n            }\n        });\n    }\n\n    /**\n     * Checks if an element is selected\n     * @param element HTML element to check\n     * @returns true if the element is selected\n     */\n    public isSelected(element: HTMLElement): boolean {\n        return this.selectedElements.has(element);\n    }\n\n    /**\n     * Gets all selected elements\n     * @returns Array of selected HTML elements\n     */\n    public getSelectedElements(): HTMLElement[] {\n        return Array.from(this.selectedElements);\n    }\n\n    /**\n     * Mouse down event handler\n     */\n    private onMouseDown(event: MouseEvent): void {\n        this.startX = event.clientX;\n        this.startY = event.clientY;\n        this.isDragging = false;\n        this.currentTarget = event.target as HTMLElement;\n\n        // Find the nearest registered element\n        const targetElement = this.findRegisteredParent(this.currentTarget);\n\n        // If clicked on a registered element\n        if (targetElement) {\n            this.selectElement(targetElement);\n        }\n        // If clicked on the scene and it's not the start of dragging\n        else if (this.currentTarget.dataset.element === 'scene') {\n            // Remember that the click was on the scene\n            this.clickedOnScene = true;\n        }\n    }\n\n    /**\n     * Mouse move event handler\n     */\n    private onMouseMove(event: MouseEvent): void {\n        if (!this.startX || !this.startY) {\n            return;\n        }\n\n        const dx = event.clientX - this.startX;\n        const dy = event.clientY - this.startY;\n\n        // Check if the drag threshold has been exceeded\n        if (!this.isDragging && Math.sqrt(dx * dx + dy * dy) > this.dragThreshold) {\n            this.isDragging = true;\n        }\n    }\n\n    /**\n     * Mouse up event handler\n     */\n    private onMouseUp(_event: MouseEvent): void {\n        // If it was dragging and releasing on the scene,\n        // just reset the state without changing the selection\n        if (this.isDragging) {\n            this.reset();\n\n            return;\n        }\n\n        // If clicked on the scene (not while dragging)\n        if (this.clickedOnScene && !this.isDragging) {\n            // Clear selection only when clicking on the scene, not when dragging\n            this.clearSelection();\n        }\n\n        this.reset();\n    }\n\n    /**\n     * Finds the closest parent element that is registered in the service\n     */\n    private findRegisteredParent(element: HTMLElement | null): HTMLElement | null {\n        let current = element;\n\n        while (current) {\n            if (this.registeredElements.has(current)) {\n                return current;\n            }\n\n            current = current.parentElement;\n        }\n\n        return null;\n    }\n\n    /**\n     * Resets the drag state\n     */\n    private reset(): void {\n        this.startX = null;\n        this.startY = null;\n        this.isDragging = false;\n        this.currentTarget = null;\n        this.clickedOnScene = false; // Reset the scene click flag\n    }\n}\n","import type {AbstractControl, ValidationErrors, ValidatorFn} from '@angular/forms';\n\nimport type {DfDataModel} from '../../ng-draw-flow.interfaces';\nimport {buildAdjacencyMap, findCycleNodes, generateConnectionsHash} from './helpers';\n\n/**\n * Validator for checking cycles in a graph\n *\n * ### Validation error shape\n * ```ts\n * {\n *   hasCycle: true,\n *   cycleNodes: DfId[] // array of nodeIds that form a cycle\n * }\n * ```\n * @returns ValidatorFn that returns an error if a cycle is detected in the graph\n */\nexport function dfCycleDetectionValidator(): ValidatorFn {\n    // Cache for storing previous state\n    let previousConnectionsHash: string | null = null;\n    let previousResult: ValidationErrors | null = null;\n\n    return (control: AbstractControl): ValidationErrors | null => {\n        const model: DfDataModel = control.value;\n\n        if (!model?.connections || model.connections.length === 0) {\n            previousConnectionsHash = null;\n            previousResult = null;\n\n            return null; // No connections - no cycles\n        }\n\n        // Create a hash of current connections for comparison\n        const currentConnectionsHash = generateConnectionsHash(model.connections);\n\n        // If the hash hasn't changed, return the previous result\n        if (\n            previousConnectionsHash === currentConnectionsHash &&\n            previousResult !== undefined\n        ) {\n            return previousResult;\n        }\n\n        // Save the new hash\n        previousConnectionsHash = currentConnectionsHash;\n\n        // Build the adjacency map\n        const {adjacencyMap, nodeIds} = buildAdjacencyMap(model.connections);\n\n        // Check for cycles and get the cycle nodes if any\n        const cycleNodes = findCycleNodes(adjacencyMap, nodeIds);\n\n        if (cycleNodes.length > 0) {\n            previousResult = {\n                hasCycle: true,\n                cycleNodes,\n            };\n\n            return previousResult;\n        }\n\n        previousResult = null;\n\n        return null; // No cycles detected\n    };\n}\n","import type {DfDataConnection, DfId} from '../../ng-draw-flow.interfaces';\n\n/**\n * Builds an adjacency map from a list of connections\n * @param connections List of graph connections\n * @returns Object with adjacency map and array of unique node IDs\n */\nexport function buildAdjacencyMap(connections: DfDataConnection[]): {\n    adjacencyMap: Map<DfId, Set<DfId>>;\n    nodeIds: DfId[];\n} {\n    const adjacencyMap = new Map<DfId, Set<DfId>>();\n    const nodeIdsSet = new Set<DfId>();\n\n    connections.forEach((connection) => {\n        const sourceNodeId = connection.source.nodeId;\n        const targetNodeId = connection.target.nodeId;\n\n        nodeIdsSet.add(sourceNodeId);\n        nodeIdsSet.add(targetNodeId);\n\n        if (!adjacencyMap.has(sourceNodeId)) {\n            adjacencyMap.set(sourceNodeId, new Set<DfId>());\n        }\n\n        adjacencyMap.get(sourceNodeId)!.add(targetNodeId);\n    });\n\n    return {\n        adjacencyMap,\n        nodeIds: Array.from(nodeIdsSet),\n    };\n}\n\n/**\n * Iterative function to find cycle nodes\n * @param adjacencyMap Adjacency map\n * @param nodeIds Array of node IDs\n * @returns Array of node IDs that form a cycle, or empty array if no cycle is found\n */\nexport function findCycleNodes(\n    adjacencyMap: Map<DfId, Set<DfId>>,\n    nodeIds: DfId[],\n): DfId[] {\n    // Node states: 0 - not visited, 1 - in current path, 2 - fully processed\n    const nodeStates = new Map<DfId, number>();\n\n    // Initialize all nodes as not visited\n    nodeIds.forEach((nodeId) => {\n        nodeStates.set(nodeId, 0);\n    });\n\n    // Check each node as a possible starting point\n    for (const nodeId of nodeIds) {\n        if (nodeStates.get(nodeId) !== 0) {\n            continue;\n        }\n\n        const cycleResult = checkNodeForCycle(nodeId, adjacencyMap, nodeStates);\n\n        if (cycleResult.length > 0) {\n            return cycleResult;\n        }\n    }\n\n    return []; // No cycle found\n}\n\n/**\n * Helper function to check a specific node for cycles\n * @param startNodeId Starting node ID\n * @param adjacencyMap Adjacency map\n * @param nodeStates Map of node states\n * @returns Array of node IDs that form a cycle, or empty array if no cycle is found\n */\nfunction checkNodeForCycle(\n    startNodeId: DfId,\n    adjacencyMap: Map<DfId, Set<DfId>>,\n    nodeStates: Map<DfId, number>,\n): DfId[] {\n    // Use a stack for iterative DFS and a path array to track the current path\n    const stack: Array<{nodeId: DfId; processed: boolean}> = [\n        {nodeId: startNodeId, processed: false},\n    ];\n    const path: DfId[] = [];\n\n    while (stack.length > 0) {\n        const {nodeId, processed} = stack[stack.length - 1]!;\n\n        if (processed) {\n            // Node is fully processed\n            nodeStates.set(nodeId, 2);\n            stack.pop();\n\n            // Remove the node from the current path when backtracking\n            if (path.length > 0 && path[path.length - 1] === nodeId) {\n                path.pop();\n            }\n\n            continue;\n        }\n\n        // Mark the node as being in the current path\n        nodeStates.set(nodeId, 1);\n        stack[stack.length - 1]!.processed = true;\n        path.push(nodeId);\n\n        // Process neighbors\n        const cycleFound = processNeighbors({\n            nodeId,\n            adjacencyMap,\n            nodeStates,\n            path,\n            stack,\n        });\n\n        if (cycleFound.length > 0) {\n            return cycleFound;\n        }\n    }\n\n    return []; // No cycle found from this starting node\n}\n\ninterface ProcessNeighborsContext {\n    /** Current node ID */\n    nodeId: DfId;\n    /** Map of adjacency relationships between nodes */\n    adjacencyMap: Map<DfId, Set<DfId>>;\n    /** Map of node states (0 = unvisited, 1 = visiting, 2 = visited) */\n    nodeStates: Map<DfId, number>;\n    /** Current path */\n    path: DfId[];\n    /** DFS stack */\n    stack: Array<{nodeId: DfId; processed: boolean}>;\n}\n\n/**\n * Processes all neighbors of a given node during DFS.\n *\n * @param context Object containing traversal context, adjacency map and state tracking.\n * @returns Array of node IDs forming a cycle, or empty array if no cycle is found.\n */\nfunction processNeighbors({\n    nodeId,\n    adjacencyMap,\n    nodeStates,\n    path,\n    stack,\n}: ProcessNeighborsContext): DfId[] {\n    const neighbors = adjacencyMap.get(nodeId) || new Set<DfId>();\n\n    for (const neighbor of neighbors) {\n        const neighborState = nodeStates.get(neighbor);\n\n        if (neighborState === 1) {\n            // Cycle found - extract the cycle nodes from the path\n            const cycleStartIndex = path.indexOf(neighbor);\n\n            return path.slice(cycleStartIndex).concat([neighbor]);\n        }\n\n        if (neighborState === 0) {\n            // Add unvisited node to the stack\n            stack.push({nodeId: neighbor, processed: false});\n        }\n    }\n\n    return []; // No cycle found among neighbors\n}\n\n/**\n * Generates a hash for an array of connections\n * @param connections Array of connections\n * @returns String hash representing the current state of connections\n */\nexport function generateConnectionsHash(connections: DfDataConnection[]): string {\n    let hash = 0;\n\n    for (const conn of connections) {\n        // Create a string representation of the connection\n        const connStr = `${conn.source.nodeId}:${conn.source.connectorId}->${conn.target.nodeId}:${conn.target.connectorId}`;\n\n        // Calculate the string hash (simple hash function)\n        for (let i = 0; i < connStr.length; i++) {\n            const char = connStr.charCodeAt(i);\n\n            hash = (hash << 5) - hash + char;\n            hash &= hash; // Convert to 32-bit integer\n        }\n    }\n\n    return hash.toString(36); // Convert to base-36 string for compactness\n}\n","export * from './cycle-detection/cycle-detection.validator';\nexport * from './isolated-nodes/isolated-nodes.validator';\n","import type {WritableSignal} from '@angular/core';\nimport {InjectionToken, signal} from '@angular/core';\n\nexport const INVALID_NODES = new InjectionToken<WritableSignal<string[]>>(\n    '[INVALID_NODES]: Invalid nodes signal',\n    {factory: () => signal([])},\n);\n","import type {AbstractControl, ValidationErrors, ValidatorFn} from '@angular/forms';\n\nimport type {\n    DfDataConnection,\n    DfDataInitialNode,\n    DfDataModel,\n    DfDataNode,\n    DfId,\n} from '../../ng-draw-flow.interfaces';\n\n/**\n * Validator that checks for *isolated* (disconnected) nodes — nodes that do **not** appear in any connection.\n *\n * ### Validation error shape\n * ```ts\n * {\n *   hasIsolatedNodes: boolean;\n *   isolatedNodes: DfId[] // array of nodeIds without connections\n * }\n * ```\n * When there are **no** isolated nodes, it returns `null` so the control is valid.\n */\nexport function dfIsolatedNodesValidator(): ValidatorFn {\n    return (control: AbstractControl): ValidationErrors | null => {\n        const model: DfDataModel = control.value;\n\n        if (!model?.nodes?.length) {\n            return null;\n        }\n\n        const connectedIds = new Set<DfId>();\n\n        model.connections?.forEach((c: DfDataConnection) => {\n            connectedIds.add(c.source.nodeId);\n            connectedIds.add(c.target.nodeId);\n        });\n\n        const isolatedNodes: DfId[] = model.nodes\n            .filter((node: DfDataInitialNode | DfDataNode) => !connectedIds.has(node.id))\n            .map((node) => node.id);\n\n        return isolatedNodes.length ? {hasIsolatedNodes: true, isolatedNodes} : null;\n    };\n}\n"],"names":["HttpClient","HttpClientModule","SecurityContext","BrowserModule","BrowserAnimationsModule","TuiAlert","TuiDialog","TuiLink","TuiRoot","NG_EVENT_PLUGINS","MarkdownModule","AppComponent","APP_PROVIDERS","AppRoutingModule","AppBrowserModule","bootstrap","imports","withServerTransition","appId","forRoot","loader","sanitize","NONE","i3","TuiDocAPI","TuiDocAPIItem","TuiDocCopy","TuiDocTab","TuiDocDemo","TuiDocCode","TuiDocExample","TuiDocDocumentation","TuiDocPage","TuiDocNavigation","TuiDocMain","declarations","i1","i2","TuiDocAPINumberItem","TuiDocExampleGetTabsPipe","TuiDocTypeReferencePipe","TuiDocDocumentationPropertyConnector","TuiDocPageTabConnector","i4","TuiDocText","selectors","decls","vars","template","AppComponent_Template","rf","ctx","i0","ɵɵelementStart","ɵɵelement","ɵɵelementEnd","isPlatformBrowser","LocationStrategy","PathLocationStrategy","inject","PLATFORM_ID","provideNgDrawFlowConfigs","TUI_DOC_DEFAULT_TABS","TUI_DOC_LOGO","TUI_DOC_PAGES","TUI_DOC_TITLE","HIGHLIGHT_OPTIONS","DEMO_PAGES","LOGO_CONTENT","FormNodeComponent","InfoNodeComponent","InputNodeComponent","MiniNodeComponent","OutputNodeComponent","SimpleNodeComponent","provide","useClass","useValue","useFactory","isBrowser","coreLibraryLoader","_ref","_asyncToGenerator","apply","arguments","lineNumbersLoader","_ref2","Promise","resolve","languages","typescript","_ref3","less","_ref4","xml","_ref5","nodes","infoNode","simpleNode","inputNode","outputNode","miniNode","formNode","RouterModule","DemoPath","appRoutes","path","Quickstart","loadComponent","data","title","TermsAndDefinitions","ConfigurationAndPublicApi","PanZoom","Nodes","Connectors","_ref6","Connections","_ref7","Labels","_ref8","Validation","_ref9","SimpleExample","_ref0","Overview","_ref1","Editor","_ref10","StressTest","_ref11","redirectTo","initialNavigation","scrollPositionRestoration","exports","CustomNodes","GITHUB_API","DestroyRef","signal","takeUntilDestroyed","RouterLink","TuiButton","TuiIcon","PolymorpheusComponent","LogoComponent","constructor","stars","destroyRef","http","ngOnInit","get","pipe","subscribe","response","set","Intl","NumberFormat","notation","format","standalone","features","ɵɵStandaloneFeature","consts","LogoComponent_Template","ɵɵtext","ɵɵadvance","ɵɵstyleProp","ɵɵtextInterpolate1","TuiBadgedContentDirective","TuiBadgedContentComponent","styles","changeDetection","CommonModule","FormControl","FormGroup","ReactiveFormsModule","Validators","DfInputComponent","DfOutputComponent","DrawFlowBaseNode","TuiInputModule","TuiTextfieldControllerModule","ɵɵproperty","ɵɵpureFunction2","_c0","ctx_r0","nodeId","ɵɵelementContainerStart","ɵɵelementContainerEnd","ctx_r4","getConnectorId","fieldName_r2","ɵɵtemplate","FormNodeComponent_div_4_ng_container_3_Template","ctx_r1","form","field1","connectorId","fieldValue","required","field2","invalid","value","formInvalid","Object","values","controls","some","fieldGroup","touched","fieldNames","keys","fieldName","group","ngAfterViewInit","valueChanges","model","add","index","length","newFieldKey","newField","addControl","t","hostBindings","FormNodeComponent_HostBindings","FormNodeComponent_keydown_backspace_stop_HostBindingHandler","FormNodeComponent_df_input_0_Template","FormNodeComponent_div_4_Template","ɵɵlistener","FormNodeComponent_Template_button_click_5_listener","startNode","text","NgForOf","NgIf","ɵNgNoValidate","NgControlStatus","NgControlStatusGroup","FormGroupDirective","FormControlName","FormGroupName","TuiInputComponent","TuiInputDirective","TuiTextfieldSizeDirective","ɵɵInheritDefinitionFeature","InfoNodeComponent_Template","DfConnectorPosition","connectorPosition","InputNodeComponent_Template","Left","Top","ɵɵtextInterpolate","Right","Bottom","ɵɵpureFunction1","i_r2","_c1","LabelNodeComponent","outputConnectors","addOutputConnector","push","outputs","LabelNodeComponent_Template","LabelNodeComponent_ng_container_3_Template","LabelNodeComponent_Template_button_click_4_listener","MiniNodeComponent_Template","MiniNodeComponent_df_input_0_Template","MiniNodeComponent_df_output_3_Template","endNode","OutputNodeComponent_Template","SimpleNodeComponent_Template","SimpleNodeComponent_df_input_0_Template","SimpleNodeComponent_df_output_3_Template","document","addEventListener","__NgCli_bootstrap_1","platformBrowser","bootstrapModule","then","ref","windowRef","window","ngRef","destroy","catch","err","console","error","section","route","AsyncPipe","EventEmitter","PolymorpheusOutlet","animationFrameScheduler","asyncScheduler","combineLatest","concat","delay","distinctUntilChanged","map","observeOn","of","shareReplay","skip","startWith","switchMap","SelectableElementDirective","createConnectorHash","deepEqual","DRAW_FLOW_OPTIONS","DfConnectionType","CoordinatesService","ConnectionsService","createBezierPath","createSmoothStepPath","label_r2","ɵɵnamespaceHTML","ConnectionComponent__svg_foreignObject_11_ng_container_4_Template","tmp_0_0","ɵɵpipeBind1","labelPosition$","x","tmp_1_0","y","connection","label","content","context","ConnectionComponent","connectionsService","coordinatesService","options","selected","arrowhead","deletable","connectionsDeletable","markerEnd","type","arrowWidth","width","arrowHeight","height","arrowMarkerWidth","arrowMarkerHeight","arrowViewBox","arrowPoints","arrowClosedPoints","connectionDeleted","connectionSelected","pathWithLabel$","getConnectionPoint","source","target","sourcePoint","targetPoint","warn","start","end","labelX","labelY","SmoothStep","curvature","Bezier","bufferSize","refCount","path$","optimization$","handleKeyboardEvent","event","preventDefault","removeConnection","emit","onSelectedChanged","connector","ConnectionComponent_HostBindings","$event","ɵɵresolveDocument","ConnectionComponent_keydown_backspace_HostBindingHandler","ɵɵnamespaceSVG","ConnectionComponent_Template__svg_path_dfSelectableElement_7_listener","ConnectionComponent__svg_foreignObject_11_Template","ɵɵclassProp","ɵɵattribute","BehaviorSubject","connections$","usedConnectors$","addConnections","connections","newConnections","filter","newConnection","existingConnection","areConnectionsEqual","updatedUsedConnectors","forEach","includes","next","connectionToRemove","filteredConnections","usedConnectors","removeConnectionsByNodeId","id","connectionsToKeep","removeConnectionsByConnectorId","connectorIdToRemove","connection1","connection2","connectorType","factory","ɵfac","computed","DraftConnectionService","DraftConnectionComponent","draftConnectionService","connectionCreated","connectionCreated$","pathData","viewQuery","DraftConnectionComponent_Query","DOCUMENT","fromEvent","pairwise","repeat","Subject","takeUntil","tap","INITIAL_COORDINATES","dfDistanceBetweenPoints","DfConnectionPoint","PanZoomService","getConnectorDataset","panZoomService","destroy$","point","position","isConnectionCreating$","connection$","connectionSubscription","ngOnDestroy","complete","connectionsCreatable","connectorData","onDragStart","previousEvent","currentEvent","onDragMove","onDragEnd","sourceConnector","sourceId","getTargetPosition","deltaX","deltaY","zoom","panzoomModel","startPosition","targetConnector","Input","connectionLabel","resetConnectors","calculateDistance","Math","hypot","getBezierEdgeCenter","getControlWithCurvature","startConnector","endConnector","sourceControlPoint","targetControlPoint","offsetX","offsetY","centerX","centerY","abs","calculateControlOffset","distance","sqrt","getPrimaryDirection","sourcePos","getSmoothStepEdgeCenter","bend","startPoint","cornerPoint","endPoint","maxRadius","bendRadius","min","isColinear","enteringHorizontally","xDir","yDir","CONNECTOR_DIRECTIONS","MIN_SEGMENT_LENGTH","computeWaypoints","pointsParams","targetPos","offset","centerOverride","sourceDir","targetDir","sourceGap","targetGap","firstStep","primaryAxis","axisSign","fallbackCX","fallbackCY","labelCenterX","labelCenterY","elbows","sourceOpposesTarget","verticalSplit","horizontalSplit","keepDirection","sourceToTarget","targetToSource","crossAxis","sameCardinal","mustFlip","longestX","max","longestY","polyline","radius","reduce","computedPath","pathStepIndex","arr","isConnectorType","element","dataset","isValidConnector","ElementRef","BaseConnector","isDisabled","nativeElement","sub","usedConnectorIds","setupDisabledState","bindNodeId","bindConnectorId","bindPosition","connected","setAttribute","removeAttribute","single","classList","toggle","hostVars","BaseConnector_HostBindings","inputs","DfInputComponent_Template","Output","_event","DfOutputComponent_HostBindings","ChangeDetectorRef","ViewContainerRef","merge","DfDragDropStage","DragDropDirective","DRAW_FLOW_ROOT_ELEMENT","DF_PAN_ZOOM_OPTIONS","NodeComponent","cdr","drawFlowOptions","drawFlowComponents","nodeDragThreshold","draggable","nodesDraggable","nodesDeletable","drawFlowElement","panZoomOptions","accumulatedDelta","previousInputs","previousOutputs","nodeMoved","nodeDeleted","nodeSelected","connectorDeleted","cursor","node","ngOnChanges","changes","innerComponent","currentValue","markForCheck","fillValue","createNodeContentComponent","subscribeToConnectorsChanges","saveInnerNodeSize","setInitialPosition","updateConnectorsCoordinates","nodeType","containerRef","clear","nodeContentComponentRef","createComponent","instance","detectChanges","applyOutputsConnectionLabel","onDrag","stage","Move","applyX","applyY","centeredPosition","getCenteredPosition","applyPositionToStyle","recalculateConnectorsPosition","panzoomDisabled","getCenterOfViewport","location","nodeWidth","offsetWidth","nodeHeight","offsetHeight","centeredCoordinates","input","updateConnectorCoordinates","output","currentMoveDistance","recalculateConnectorPositionFromLast","newConnectorPosition","coordinates","addConnectionPoint","calculatedConnectorPosition","calculateConnectorPosition","nodePosition","offsetLeft","clientWidth","offsetTop","clientHeight","hasAttribute","offsetParent","dynamic","nodeElementRef","style","transform","panSize","leftPosition","panZoomLeftPosition","topPosition","panZoomTopPosition","halfOfNodeWidth","halfOfNodeHeight","halfOfPanSize","toArray","connectorsUpdates$","collectConnectorUpdateSources","panPositionX","panPositionY","scaledPanPositionX","scaledPanPositionY","sources","addContentComponentUpdates","addInputsUpdates","addOutputsUpdates","connectorsUpdated","currentInputs","handleRemovedInputs","currentOutputs","handleRemovedOutputs","currentArray","removedOutputs","prev","curr","NodeComponent_Query","NodeComponent_keydown_backspace_HostBindingHandler","NodeComponent_Template_div_dfDragDrop_0_listener","NodeComponent_Template_div_dfSelectableElement_0_listener","ɵɵelementContainer","ResizeObserverService","take","throttleTime","timer","DF_FALSE_HANDLER","dfClamp","dfPx","DF_PAN_ZOOM_INITIAL_SCALE","ZoomDirective","PanZoomComponent","el","drawFlowRootElement","resizeObserver$","zoom$","coordinates$","manualZoomAnimation$","dragStage$","scale","zoomAnimationDuration","cursor$","transitioned$","passive","leading","trailing","wrapperTransform$","round","translate","panZoomContainerTransform$","entries","contentRect","rootSize","onPan","getGuardedCoordinates","onZoom","clientX","clientY","delta","getBoundingClientRect","processZoom","resetPanzoom","zoomIn","zoomStep","maxZoom","setZoom","zoomOut","minZoom","oldScale","newScale","center","getScaleCenter","moveX","moveY","offsets","ngContentSelectors","PanZoomComponent_Template","PanZoomComponent_Template_div_dfDragDrop_0_listener","PanZoomComponent_Template_div_dfZoom_0_listener","ɵɵprojection","InjectionToken","DF_PAN_ZOOM_DEFAULT_OPTIONS","zoomWheelSensitivity","touchSensitivity","dfPanZoomOptionsProvider","ZoomService","dfZoom","ZoomDirective_HostBindings","Observable","scan","dfDistanceBetweenTouches","dfPreventDefault","wheelSensitivity","subscriber","touches","startEvent","touch1","touch2","wheel","forwardRef","NG_VALUE_ACCESSOR","INVALID_NODES","SceneComponent_ng_container_0_Template_df_node_connectorDeleted_1_listener","ɵɵrestoreView","_r5","ɵɵnextContext","ɵɵresetView","onConnectorDeleted","SceneComponent_ng_container_0_Template_df_node_nodeDeleted_1_listener","restoredCtx","node_r3","$implicit","ctx_r6","onNodeDeleted","SceneComponent_ng_container_0_Template_df_node_nodeMoved_1_listener","ctx_r7","onNodeMoved","SceneComponent_ng_container_0_Template_df_node_nodeSelected_1_listener","ctx_r8","onNodeSelected","$invalidNodes","SceneComponent_ng_container_1_Template_df_connection_connectionDeleted_1_listener","_r11","connection_r9","ctx_r10","onConnectionDeleted","SceneComponent_ng_container_1_Template_df_connection_connectionSelected_1_listener","ctx_r12","SceneComponent_df_draft_connection_2_Template_df_draft_connection_connectionCreated_0_listener","_r14","ctx_r13","onConnectionCreated","SceneComponent","onChange","_","onTouched","initializeConnectionsSubscription","updated","n","deleted","find","emitConnectionDeletedByNodeId","trackByNodeId","trackByConnectionsFn","_index","writeValue","registerOnChange","fn","registerOnTouched","hostAttrs","SceneComponent_HostBindings","useExisting","multi","SceneComponent_Template","SceneComponent_ng_container_0_Template","SceneComponent_ng_container_1_Template","SceneComponent_df_draft_connection_2_Template","DF_TRUE_HANDLER","DragDropService","elementRef","dfDragDrop","streamFor","share","pointerDownMap","WeakMap","dragDropStreams","pointerMove$","pointerUp$","cached","pointerDown$","drag$","pointerId","lastPointerEvent","pointerUpStream$","e","End","sourceElement","pointerMoveStream$","dx","dy","providedIn","NgControl","collectInvalidNodeIds","ErrorsDirective","ngControl","control","statusChanges","status","errors","idsSet","Array","from","RESIZE_OPTION_BOX","RESIZE_OPTION_BOX_DEFAULT","DfResizeObserver","dfResizeObserver","box","dfResizeBox","ɵɵProvidersFeature","getAttribute","SelectionService","selectionService","unregisterFn","selectionChanged","registerElement","handleSelectionChange","Set","allIds","v","isArray","every","nodeIds","acc","a","b","visited","Map","typeA","typeB","Number","isNaN","has","isArrayA","isArrayB","i","Date","getTime","RegExp","toString","size","key","arrA","arrB","primitivesOnly","item","primitiveCompare","String","localeCompare","sort","itemA","itemB","keysA","keysB","prototype","hasOwnProperty","call","firstEvent","secondEvent","dfStopPropagation","stopPropagation","invalidState","DrawFlowBaseNode_Query","debounceTime","NgDrawFlowComponent_df_scene_1_Template_df_scene_connectionCreated_0_listener","_r2","NgDrawFlowComponent_df_scene_1_Template_df_scene_connectionDeleted_0_listener","ctx_r3","NgDrawFlowComponent_df_scene_1_Template_df_scene_connectionSelected_0_listener","NgDrawFlowComponent_df_scene_1_Template_df_scene_nodeDeleted_0_listener","ctx_r5","NgDrawFlowComponent_df_scene_1_Template_df_scene_nodeMoved_0_listener","NgDrawFlowComponent_df_scene_1_Template_df_scene_nodeSelected_0_listener","NgDrawFlowComponent","$rootReady","watchFormChanges","setValue","emitEvent","panzoom","resetPosition","onResize","Boolean","NgDrawFlowComponent_Query","deps","ɵɵHostDirectivesFeature","directive","NgDrawFlowComponent_Template","NgDrawFlowComponent_Template_df_pan_zoom_scale_0_listener","NgDrawFlowComponent_df_scene_1_Template","FormControlDirective","DfArrowhead","DRAW_FLOW_DEFAULT_OPTIONS","None","ReplaySubject","connectionPointsMap","connectionPointsMapChange$","connectorHash","NgZone","ngZone","selectedElements","registeredElements","isDragging","clickedOnScene","startX","startY","dragThreshold","currentTarget","boundMouseDown","onMouseDown","bind","boundMouseMove","onMouseMove","boundMouseUp","onMouseUp","runOutsideAngular","removeEventListener","callback","unregisterElement","delete","selectElement","exclusive","clearSelection","run","deselectElement","exceptElement","isSelected","getSelectedElements","targetElement","findRegisteredParent","reset","current","parentElement","buildAdjacencyMap","findCycleNodes","generateConnectionsHash","dfCycleDetectionValidator","previousConnectionsHash","previousResult","currentConnectionsHash","undefined","adjacencyMap","cycleNodes","hasCycle","nodeIdsSet","sourceNodeId","targetNodeId","nodeStates","cycleResult","checkNodeForCycle","startNodeId","stack","processed","pop","cycleFound","processNeighbors","neighbors","neighbor","neighborState","cycleStartIndex","indexOf","slice","hash","conn","connStr","char","charCodeAt","dfIsolatedNodesValidator","connectedIds","c","isolatedNodes","hasIsolatedNodes"],"sourceRoot":"webpack:///","x_google_ignoreList":[]}