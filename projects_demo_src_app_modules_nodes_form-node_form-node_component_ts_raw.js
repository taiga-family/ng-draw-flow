"use strict";
(self["webpackChunkdemo"] = self["webpackChunkdemo"] || []).push([["projects_demo_src_app_modules_nodes_form-node_form-node_component_ts_raw"],{

/***/ 814:
/*!**********************************************************************************!*\
  !*** ./projects/demo/src/app/modules/nodes/form-node/form-node.component.ts?raw ***!
  \**********************************************************************************/
/***/ ((module) => {

module.exports = "import {CommonModule} from '@angular/common';\nimport {\n    type AfterViewInit,\n    ChangeDetectionStrategy,\n    Component,\n    DestroyRef,\n    inject,\n    Input,\n} from '@angular/core';\nimport {takeUntilDestroyed} from '@angular/core/rxjs-interop';\nimport {FormControl, FormGroup, ReactiveFormsModule, Validators} from '@angular/forms';\nimport {DfInputComponent, DfOutputComponent, DrawFlowBaseNode} from '@ng-draw-flow/core';\nimport {TuiButton} from '@taiga-ui/core';\nimport {TuiInputModule, TuiTextfieldControllerModule} from '@taiga-ui/legacy';\n\ninterface NodeForm {\n    field1: FormGroup<NodeFormGroup>;\n    field2: FormGroup<NodeFormGroup>;\n}\n\ninterface NodeFormGroup {\n    connectorId: FormControl<string | null>;\n    fieldValue: FormControl<string | null>;\n}\n\n@Component({\n    standalone: true,\n    selector: 'app-form-node',\n    imports: [\n        CommonModule,\n        DfInputComponent,\n        DfOutputComponent,\n        ReactiveFormsModule,\n        TuiButton,\n        TuiInputModule,\n        TuiTextfieldControllerModule,\n    ],\n    templateUrl: './form-node.component.html',\n    styleUrls: ['./form-node.component.less'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    host: {\n        '(keydown.delete.stop)': '0',\n        '(keydown.backspace.stop)': '0',\n    },\n})\nexport class FormNodeComponent extends DrawFlowBaseNode implements AfterViewInit {\n    private readonly destroyRef = inject(DestroyRef);\n\n    public form = new FormGroup<NodeForm>({\n        field1: new FormGroup<NodeFormGroup>({\n            connectorId: new FormControl<string>('node-5-output-1'),\n            fieldValue: new FormControl<string>('', [Validators.required]),\n        }),\n        field2: new FormGroup<NodeFormGroup>({\n            connectorId: new FormControl<string>('node-5-output-2'),\n            fieldValue: new FormControl<string>('', [Validators.required]),\n        }),\n    });\n\n    @Input()\n    public override set invalid(value: boolean) {\n        super.invalid = value;\n    }\n\n    public override get invalid(): boolean {\n        const formInvalid = Object.values(this.form.controls).some(\n            (fieldGroup: FormGroup<NodeFormGroup>): boolean =>\n                fieldGroup.controls.fieldValue.touched &&\n                fieldGroup.controls.fieldValue.invalid,\n        );\n\n        return super.invalid || formInvalid;\n    }\n\n    public get fieldNames(): string[] {\n        return Object.keys(this.form.controls);\n    }\n\n    public getConnectorId(fieldName: string | null): string | null {\n        if (!fieldName) {\n            return null;\n        }\n\n        const group = this.form.get(fieldName) as FormGroup<NodeFormGroup>;\n\n        return group.controls.connectorId.value;\n    }\n\n    public ngAfterViewInit(): void {\n        this.form.valueChanges\n            .pipe(takeUntilDestroyed(this.destroyRef))\n            .subscribe((value) => {\n                this.model.value = value;\n            });\n    }\n\n    public add(): void {\n        const index = Object.keys(this.form.controls).length + 1;\n        const newFieldKey = `field${index}`;\n        const newField = new FormGroup({\n            connectorId: new FormControl(`node-5-output-${index}`),\n            fieldValue: new FormControl(''),\n        });\n\n        // @ts-ignore\n        this.form.addControl(newFieldKey, newField);\n    }\n}\n";

/***/ })

}]);